diff --git a/libraries/freertos_plus/standard/freertos_plus_tcp/source/FreeRTOS_DNS.c b/libraries/freertos_plus/standard/freertos_plus_tcp/source/FreeRTOS_DNS.c
index cd00441a7..352471f7c 100755
--- a/libraries/freertos_plus/standard/freertos_plus_tcp/source/FreeRTOS_DNS.c
+++ b/libraries/freertos_plus/standard/freertos_plus_tcp/source/FreeRTOS_DNS.c
@@ -121,7 +121,11 @@
 /*
  * Create the DNS message in the zero copy buffer passed in the first parameter.
  */
+    #ifdef CBMC
+    size_t prvCreateDNSMessage( uint8_t *pucUDPPayloadBuffer,
+    #else
     static size_t prvCreateDNSMessage( uint8_t * pucUDPPayloadBuffer,
+    #endif
                                        const char * pcHostName,
                                        TickType_t uxIdentifier );
 
@@ -129,7 +133,11 @@
  * Simple routine that jumps over the NAME field of a resource record.
  * It returns the number of bytes read.
  */
+    #ifdef CBMC
+    size_t prvSkipNameField( const uint8_t * pucByte,
+    #else
     static size_t prvSkipNameField( const uint8_t * pucByte,
+    #endif
                                     size_t uxLength );
 
 /*
@@ -137,7 +145,11 @@
  * The parameter 'xExpected' indicates whether the identifier in the reply
  * was expected, and thus if the DNS cache may be updated with the reply.
  */
+    #ifdef CBMC
+    uint32_t prvParseDNSReply( uint8_t * pucUDPPayloadBuffer,
+    #else
     static uint32_t prvParseDNSReply( uint8_t * pucUDPPayloadBuffer,
+    #endif
                                       size_t uxBufferLength,
                                       BaseType_t xExpected );
 
@@ -191,7 +203,11 @@
 
 
     #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
+        #ifdef CBMC
+        size_t prvReadNameField( const uint8_t * pucByte,
+        #else
         static size_t prvReadNameField( const uint8_t * pucByte,
+        #endif
                                         size_t uxRemainingBytes,
                                         char * pcName,
                                         size_t uxDestLen );
@@ -800,7 +816,11 @@
     }
 /*-----------------------------------------------------------*/
 
+    #ifdef CBMC
+    size_t prvCreateDNSMessage( uint8_t * pucUDPPayloadBuffer,
+    #else
     static size_t prvCreateDNSMessage( uint8_t * pucUDPPayloadBuffer,
+    #endif
                                        const char * pcHostName,
                                        TickType_t uxIdentifier )
     {
@@ -880,7 +900,11 @@
 
     #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
 
+        #ifdef CBMC
+        size_t prvReadNameField( const uint8_t * pucByte,
+        #else
         static size_t prvReadNameField( const uint8_t * pucByte,
+        #endif
                                         size_t uxRemainingBytes,
                                         char * pcName,
                                         size_t uxDestLen )
@@ -980,7 +1004,11 @@
     #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
 /*-----------------------------------------------------------*/
 
+    #ifdef CBMC
+    size_t prvSkipNameField( const uint8_t * pucByte,
+    #else
     static size_t prvSkipNameField( const uint8_t * pucByte,
+    #endif
                                     size_t uxLength )
     {
         size_t uxChunkLength;
@@ -1099,7 +1127,11 @@
     #endif /* ipconfigUSE_NBNS */
 /*-----------------------------------------------------------*/
 
+    #ifdef CBMC
+    uint32_t prvParseDNSReply( uint8_t * pucUDPPayloadBuffer,
+    #else
     static uint32_t prvParseDNSReply( uint8_t * pucUDPPayloadBuffer,
+    #endif
                                       size_t uxBufferLength,
                                       BaseType_t xExpected )
     {
