diff --git a/libraries/freertos_plus/standard/freertos_plus_tcp/source/FreeRTOS_TCP_IP.c b/libraries/freertos_plus/standard/freertos_plus_tcp/source/FreeRTOS_TCP_IP.c
index 5fccdf327..c3535ffb6 100644
--- a/libraries/freertos_plus/standard/freertos_plus_tcp/source/FreeRTOS_TCP_IP.c
+++ b/libraries/freertos_plus/standard/freertos_plus_tcp/source/FreeRTOS_TCP_IP.c
@@ -198,61 +198,74 @@ static int32_t prvTCPSendPacket( FreeRTOS_Socket_t *pxSocket );
  */
 static int32_t prvTCPSendRepeated( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer );

 /*
  * Return or send a packet to the other party.
  */
 static void prvTCPReturnPacket( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer,
 	uint32_t ulLen, BaseType_t xReleaseAfterSend );

 /*
  * Initialise the data structures which keep track of the TCP windowing system.
  */
 static void prvTCPCreateWindow( FreeRTOS_Socket_t *pxSocket );

 /*
  * Let ARP look-up the MAC-address of the peer and initialise the first SYN
  * packet.
  */
 static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t *pxSocket );

 #if( ipconfigHAS_DEBUG_PRINTF != 0 )
 	/*
 	 * For logging and debugging: make a string showing the TCP flags.
 	 */
 	static const char *prvTCPFlagMeaning( UBaseType_t xFlags);
 #endif /* ipconfigHAS_DEBUG_PRINTF != 0 */

 /*
  * Parse the TCP option(s) received, if present.
  */
-static void prvCheckOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer );
+void prvCheckOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer );
+
+/*
+ * Identify and deal with a single TCP header option, advancing the pointer to
+ * the header. This function returns pdTRUE or pdFALSE depending on whether the
+ * caller should continue to parse more header options or break the loop.
+ */
+BaseType_t prvSingleStepTCPHeaderOptions( const unsigned char ** const ppucPtr, const unsigned char ** const ppucLast, FreeRTOS_Socket_t ** const ppxSocket, TCPWindow_t ** const ppxTCPWindow);
+
+/*
+ * Skip past TCP header options when doing Selective ACK, until there are no
+ * more options left.
+ */
+void prvSkipPastRemainingOptions( const unsigned char ** const ppucPtr, FreeRTOS_Socket_t ** const ppxSocket, unsigned char * const ppucLen );

 /*
  * Set the initial properties in the options fields, like the preferred
  * value of MSS and whether SACK allowed.  Will be transmitted in the state
  * 'eCONNECT_SYN'.
  */
 static UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t *pxSocket, TCPPacket_t * pxTCPPacket );

 /*
  * For anti-hang protection and TCP keep-alive messages.  Called in two places:
  * after receiving a packet and after a state change.  The socket's alive timer
  * may be reset.
  */
 static void prvTCPTouchSocket( FreeRTOS_Socket_t *pxSocket );

 /*
  * Prepare an outgoing message, if anything has to be sent.
  */
 static int32_t prvTCPPrepareSend( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t **ppxNetworkBuffer, UBaseType_t uxOptionsLength );

 /*
  * Calculate when this socket needs to be checked to do (re-)transmissions.
  */
 static TickType_t prvTCPNextTimeout( FreeRTOS_Socket_t *pxSocket );

 /*
  * The API FreeRTOS_send() adds data to the TX stream.  Add
  * this data to the windowing system to it can be transmitted.
  */
 static void prvTCPAddTxData( FreeRTOS_Socket_t *pxSocket );
@@ -1117,241 +1130,263 @@ uint32_t ulInitialSequenceNumber = 0;
 /*-----------------------------------------------------------*/

 /* For logging and debugging: make a string showing the TCP flags
 */
 #if( ipconfigHAS_DEBUG_PRINTF != 0 )

 	static const char *prvTCPFlagMeaning( UBaseType_t xFlags)
 	{
 		static char retString[10];
 		snprintf(retString, sizeof( retString ), "%c%c%c%c%c%c%c%c%c",
 			( xFlags & ipTCP_FLAG_FIN )  ? 'F' : '.',	/* 0x0001: No more data from sender */
 			( xFlags & ipTCP_FLAG_SYN )  ? 'S' : '.',	/* 0x0002: Synchronize sequence numbers */
 			( xFlags & ipTCP_FLAG_RST )  ? 'R' : '.',	/* 0x0004: Reset the connection */
 			( xFlags & ipTCP_FLAG_PSH )  ? 'P' : '.',	/* 0x0008: Push function: please push buffered data to the recv application */
 			( xFlags & ipTCP_FLAG_ACK )  ? 'A' : '.',	/* 0x0010: Acknowledgment field is significant */
 			( xFlags & ipTCP_FLAG_URG )  ? 'U' : '.',	/* 0x0020: Urgent pointer field is significant */
 			( xFlags & ipTCP_FLAG_ECN )  ? 'E' : '.',	/* 0x0040: ECN-Echo */
 			( xFlags & ipTCP_FLAG_CWR )  ? 'C' : '.',	/* 0x0080: Congestion Window Reduced */
 			( xFlags & ipTCP_FLAG_NS )   ? 'N' : '.');	/* 0x0100: ECN-nonce concealment protection */
 		return retString;
 	}
 	/*-----------------------------------------------------------*/

 #endif /* ipconfigHAS_DEBUG_PRINTF */

 /*
  * Parse the TCP option(s) received, if present.  It has already been verified
  * that: ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that the TP header
  * is longer than the usual 20 (5 x 4) bytes.
  */
-static void prvCheckOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
+void prvCheckOptions( FreeRTOS_Socket_t *pxSocket, NetworkBufferDescriptor_t *pxNetworkBuffer )
 {
 TCPPacket_t * pxTCPPacket;
 TCPHeader_t * pxTCPHeader;
 const unsigned char *pucPtr;
 const unsigned char *pucLast;
 TCPWindow_t *pxTCPWindow;
-UBaseType_t uxNewMSS;
+BaseType_t xShouldContinueLoop;

 	pxTCPPacket = ( TCPPacket_t * ) ( pxNetworkBuffer->pucEthernetBuffer );
 	pxTCPHeader = &pxTCPPacket->xTCPHeader;

 	/* A character pointer to iterate through the option data */
 	pucPtr = pxTCPHeader->ucOptdata;
 	pucLast = pucPtr + (((pxTCPHeader->ucTCPOffset >> 4) - 5) << 2);
 	pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;

 	/* Validate options size calculation. */
 	if( pucLast > ( pxNetworkBuffer->pucEthernetBuffer + pxNetworkBuffer->xDataLength ) )
 	{
 		return;
 	}

 	/* The comparison with pucLast is only necessary in case the option data are
 	corrupted, we don't like to run into invalid memory and crash. */
-	while( pucPtr < pucLast )
+	xShouldContinueLoop = pdTRUE;
+	while( ( pucPtr < pucLast ) && ( xShouldContinueLoop == pdTRUE ) )
 	{
-		UBaseType_t xRemainingOptionsBytes = pucLast - pucPtr;
+		xShouldContinueLoop = prvSingleStepTCPHeaderOptions( &pucPtr, &pucLast, &pxSocket, &pxTCPWindow );
+	}
+}

-		if( pucPtr[ 0 ] == TCP_OPT_END )
-		{
-			/* End of options. */
-			break;
-		}
-		if( pucPtr[ 0 ] == TCP_OPT_NOOP)
+/*-----------------------------------------------------------*/
+
+BaseType_t prvSingleStepTCPHeaderOptions( const unsigned char ** const ppucPtr, const unsigned char ** const ppucLast, FreeRTOS_Socket_t ** const ppxSocket, TCPWindow_t ** const ppxTCPWindow)
+{
+	UBaseType_t uxNewMSS;
+	UBaseType_t xRemainingOptionsBytes = ( *ppucLast ) - ( *ppucPtr );
+	unsigned char ucLen;
+
+	if( ( *ppucPtr )[ 0 ] == TCP_OPT_END )
+	{
+		/* End of options. */
+		return pdFALSE;
+	}
+	if( ( *ppucPtr )[ 0 ] == TCP_OPT_NOOP)
+	{
+		/* NOP option, inserted to make the length a multiple of 4. */
+		( *ppucPtr )++;
+		return pdTRUE;
+	}
+
+	/* Any other well-formed option must be at least two bytes: the option
+	type byte followed by a length byte. */
+	if( xRemainingOptionsBytes < 2 )
+	{
+		return pdFALSE;
+	}
+#if( ipconfigUSE_TCP_WIN != 0 )
+	else if( ( *ppucPtr )[ 0 ] == TCP_OPT_WSOPT )
+	{
+		/* Confirm that the option fits in the remaining buffer space. */
+		if( ( xRemainingOptionsBytes < TCP_OPT_WSOPT_LEN ) || ( ( *ppucPtr )[ 1 ] != TCP_OPT_WSOPT_LEN ) )
 		{
-			/* NOP option, inserted to make the length a multiple of 4. */
-			pucPtr++;
-			continue;
+			return pdFALSE;
 		}

-		/* Any other well-formed option must be at least two bytes: the option
-		type byte followed by a length byte. */
-		if( xRemainingOptionsBytes < 2 )
+		( *ppxSocket )->u.xTCP.ucPeerWinScaleFactor = ( *ppucPtr )[ 2 ];
+		( *ppxSocket )->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
+		( *ppucPtr ) += TCP_OPT_WSOPT_LEN;
+	}
+#endif	/* ipconfigUSE_TCP_WIN */
+	else if( ( *ppucPtr )[ 0 ] == TCP_OPT_MSS )
+	{
+		/* Confirm that the option fits in the remaining buffer space. */
+		if( ( xRemainingOptionsBytes < TCP_OPT_MSS_LEN )|| ( ( *ppucPtr )[ 1 ] != TCP_OPT_MSS_LEN ) )
 		{
-			break;
+			return pdFALSE;
 		}
-#if( ipconfigUSE_TCP_WIN != 0 )
-		else if( pucPtr[ 0 ] == TCP_OPT_WSOPT )
+
+		/* An MSS option with the correct option length.  FreeRTOS_htons()
+		is not needed here because usChar2u16() already returns a host
+		endian number. */
+		uxNewMSS = usChar2u16( ( *ppucPtr ) + 2 );
+
+		if( ( *ppxSocket )->u.xTCP.usInitMSS != uxNewMSS )
 		{
-			/* Confirm that the option fits in the remaining buffer space. */
-			if( ( xRemainingOptionsBytes < TCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != TCP_OPT_WSOPT_LEN ) )
+			/* Perform a basic check on the the new MSS. */
+			if( uxNewMSS == 0 )
 			{
-				break;
+				return pdFALSE;
 			}

-			pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
-			pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
-			pucPtr += TCP_OPT_WSOPT_LEN;
+			FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", ( *ppxSocket )->u.xTCP.usInitMSS, uxNewMSS ) );
 		}
-#endif	/* ipconfigUSE_TCP_WIN */
-		else if( pucPtr[ 0 ] == TCP_OPT_MSS )
+
+		if( ( *ppxSocket )->u.xTCP.usInitMSS > uxNewMSS )
 		{
-			/* Confirm that the option fits in the remaining buffer space. */
-			if( ( xRemainingOptionsBytes < TCP_OPT_MSS_LEN )|| ( pucPtr[ 1 ] != TCP_OPT_MSS_LEN ) )
+			/* our MSS was bigger than the MSS of the other party: adapt it. */
+			( *ppxSocket )->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
+			if( ( ( *ppxTCPWindow ) != NULL ) && ( ( *ppxSocket )->u.xTCP.usCurMSS > uxNewMSS ) )
 			{
-				break;
+				/* The peer advertises a smaller MSS than this socket was
+				using.  Use that as well. */
+				FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", ( *ppxSocket )->u.xTCP.usCurMSS, uxNewMSS ) );
+				( *ppxSocket )->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
 			}
+			( *ppxTCPWindow )->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( ( *ppxTCPWindow )->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
+			( *ppxTCPWindow )->usMSSInit = ( uint16_t ) uxNewMSS;
+			( *ppxTCPWindow )->usMSS = ( uint16_t ) uxNewMSS;
+			( *ppxSocket )->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
+			( *ppxSocket )->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
+		}

-			/* An MSS option with the correct option length.  FreeRTOS_htons()
-			is not needed here because usChar2u16() already returns a host
-			endian number. */
-			uxNewMSS = usChar2u16( pucPtr + 2 );
+		#if( ipconfigUSE_TCP_WIN != 1 )
+			/* Without scaled windows, MSS is the only interesting option. */
+			return pdFALSE;
+		#else
+			/* Or else we continue to check another option: selective ACK. */
+			( *ppucPtr ) += TCP_OPT_MSS_LEN;
+		#endif	/* ipconfigUSE_TCP_WIN != 1 */
+	}
+	else
+	{
+		/* All other options have a length field, so that we easily
+		can skip past them. */
+		ucLen = ( *ppucPtr )[ 1 ];
+		if( ( ucLen < 2 ) || ( ucLen > xRemainingOptionsBytes ) )
+		{
+			/* If the length field is too small or too big, the options are
+			 * malformed, don't process them further.
+			 */
+			return pdFALSE;
+		}

-			if( pxSocket->u.xTCP.usInitMSS != uxNewMSS )
+		#if( ipconfigUSE_TCP_WIN == 1 )
+		{
+			/* Selective ACK: the peer has received a packet but it is missing
+			 * earlier packets. At least this packet does not need retransmission
+			 * anymore. ulTCPWindowTxSack( ) takes care of this administration.
+			 */
+			if( ( *ppucPtr )[0] == TCP_OPT_SACK_A )
 			{
-				/* Perform a basic check on the the new MSS. */
-				if( uxNewMSS == 0 )
-				{
-					break;
-				}
+				ucLen -= 2;
+				( *ppucPtr ) += 2;

-				FreeRTOS_debug_printf( ( "MSS change %u -> %lu\n", pxSocket->u.xTCP.usInitMSS, uxNewMSS ) );
-			}
-
-			if( pxSocket->u.xTCP.usInitMSS > uxNewMSS )
-			{
-				/* our MSS was bigger than the MSS of the other party: adapt it. */
-				pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
-				if( ( pxTCPWindow != NULL ) && ( pxSocket->u.xTCP.usCurMSS > uxNewMSS ) )
+				while( ucLen >= 8 )
 				{
-					/* The peer advertises a smaller MSS than this socket was
-					using.  Use that as well. */
-					FreeRTOS_debug_printf( ( "Change mss %d => %lu\n", pxSocket->u.xTCP.usCurMSS, uxNewMSS ) );
-					pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
+					prvSkipPastRemainingOptions( ppucPtr, ppxSocket, &ucLen );
 				}
-				pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
-				pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
-				pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
-				pxSocket->u.xTCP.usInitMSS = ( uint16_t ) uxNewMSS;
-				pxSocket->u.xTCP.usCurMSS = ( uint16_t ) uxNewMSS;
+				/* ucLen should be 0 by now. */
 			}
-
-			#if( ipconfigUSE_TCP_WIN != 1 )
-				/* Without scaled windows, MSS is the only interesting option. */
-				break;
-			#else
-				/* Or else we continue to check another option: selective ACK. */
-				pucPtr += TCP_OPT_MSS_LEN;
-			#endif	/* ipconfigUSE_TCP_WIN != 1 */
 		}
-		else
+		#endif	/* ipconfigUSE_TCP_WIN == 1 */
+
+		( *ppucPtr ) += ucLen;
+	}
+	return pdTRUE;
+}
+
+/*-----------------------------------------------------------*/
+
+void prvSkipPastRemainingOptions( const unsigned char ** const ppucPtr, FreeRTOS_Socket_t ** const ppxSocket, unsigned char * const pucLen )
+{
+uint32_t ulFirst = ulChar2u32( ( *ppucPtr ) );
+uint32_t ulLast  = ulChar2u32( ( *ppucPtr ) + 4 );
+uint32_t ulCount = ulTCPWindowTxSack( &( *ppxSocket )->u.xTCP.xTCPWindow, ulFirst, ulLast );
+	/* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
+	 * starting from the head position.  Advance the tail pointer in txStream.
+	 */
+	if( ( ( *ppxSocket )->u.xTCP.txStream  != NULL ) && ( ulCount > 0 ) )
+	{
+		/* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
+		uxStreamBufferGet( ( *ppxSocket )->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
+		( *ppxSocket )->xEventBits |= eSOCKET_SEND;
+
+		#if ipconfigSUPPORT_SELECT_FUNCTION == 1
 		{
-			/* All other options have a length field, so that we easily
-			can skip past them. */
-			unsigned char len = pucPtr[ 1 ];
-			if( ( len < 2 ) || ( len > xRemainingOptionsBytes ) )
+			if( ( *ppxSocket )->xSelectBits & eSELECT_WRITE )
 			{
-				/* If the length field is too small or too big, the options are malformed.
-				Don't process them further. */
-				break;
+				/* The field 'xEventBits' is used to store regular socket events
+				 * (at most 8), as well as 'select events', which will be left-shifted.
+				 */
+				( *ppxSocket )->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
 			}
+		}
+		#endif

-			#if( ipconfigUSE_TCP_WIN == 1 )
+		/* In case the socket owner has installed an OnSent handler, call it now.
+		 */
+		#if( ipconfigUSE_CALLBACKS == 1 )
+		{
+			if( ipconfigIS_VALID_PROG_ADDRESS( ( *ppxSocket )->u.xTCP.pxHandleSent ) )
 			{
-				/* Selective ACK: the peer has received a packet but it is missing earlier
-				packets.  At least this packet does not need retransmission anymore
-				ulTCPWindowTxSack( ) takes care of this administration. */
-				if( pucPtr[0] == TCP_OPT_SACK_A )
-				{
-					len -= 2;
-					pucPtr += 2;
-
-					while( len >= 8 )
-					{
-					uint32_t ulFirst = ulChar2u32( pucPtr );
-					uint32_t ulLast  = ulChar2u32( pucPtr + 4 );
-					uint32_t ulCount = ulTCPWindowTxSack( &pxSocket->u.xTCP.xTCPWindow, ulFirst, ulLast );
-						/* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
-						starting from the head position.
-						Advance the tail pointer in txStream. */
-						if( ( pxSocket->u.xTCP.txStream  != NULL ) && ( ulCount > 0 ) )
-						{
-							/* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
-							uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
-							pxSocket->xEventBits |= eSOCKET_SEND;
-
-							#if ipconfigSUPPORT_SELECT_FUNCTION == 1
-							{
-								if( pxSocket->xSelectBits & eSELECT_WRITE )
-								{
-									/* The field 'xEventBits' is used to store regular socket events (at most 8),
-									as well as 'select events', which will be left-shifted */
-									pxSocket->xEventBits |= ( eSELECT_WRITE << SOCKET_EVENT_BIT_COUNT );
-								}
-							}
-							#endif
-
-							/* In case the socket owner has installed an OnSent handler,
-							call it now. */
-							#if( ipconfigUSE_CALLBACKS == 1 )
-							{
-								if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
-								{
-									pxSocket->u.xTCP.pxHandleSent( ( Socket_t )pxSocket, ulCount );
-								}
-							}
-							#endif /* ipconfigUSE_CALLBACKS == 1  */
-						}
-						pucPtr += 8;
-						len -= 8;
-					}
-					/* len should be 0 by now. */
-				}
+				( *ppxSocket )->u.xTCP.pxHandleSent( (Socket_t )( *ppxSocket ), ulCount );
 			}
-			#endif	/* ipconfigUSE_TCP_WIN == 1 */
-
-			pucPtr += len;
 		}
+		#endif /* ipconfigUSE_CALLBACKS == 1  */
 	}
+	( *ppucPtr ) += 8;
+	( *pucLen ) -= 8;
 }
+
 /*-----------------------------------------------------------*/

 #if( ipconfigUSE_TCP_WIN != 0 )

 	static uint8_t prvWinScaleFactor( FreeRTOS_Socket_t *pxSocket )
 	{
 	size_t uxWinSize;
 	uint8_t ucFactor;

 		/* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
 		uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usInitMSS;
 		ucFactor = 0u;
 		while( uxWinSize > 0xfffful )
 		{
 			/* Divide by two and increase the binary factor by 1. */
 			uxWinSize >>= 1;
 			ucFactor++;
 		}

 		FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %lu MSS %lu Factor %u\n",
 			pxSocket->u.xTCP.uxRxWinSize,
 			pxSocket->u.xTCP.usInitMSS,
 			ucFactor ) );

 		return ucFactor;
 	}

 #endif
 /*-----------------------------------------------------------*/

