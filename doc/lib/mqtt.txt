/**
@mainpage
@anchor mqtt
@brief MQTT 3.1.1 client library.

> MQTT stands for MQ Telemetry Transport. It is a publish/subscribe, extremely simple and lightweight messaging protocol, designed for constrained devices and low-bandwidth, high-latency or unreliable networks. The design principles are to minimise network bandwidth and device resource requirements whilst also attempting to ensure reliability and some degree of assurance of delivery. These principles also turn out to make the protocol ideal of the emerging "machine-to-machine" (M2M) or "Internet of Things" world of connected devices, and for mobile applications where bandwidth and battery power are at a premium.

<span style="float:right;margin-right:4em"> &mdash; <i>Official description of MQTT from [mqtt.org](http://mqtt.org)</i></span><br>

This MQTT library implements a subset of the MQTT 3.1.1 standard for compatibility with the [AWS IoT MQTT server](https://docs.aws.amazon.com/iot/latest/developerguide/protocols.html#mqtt). It is also compatible with other MQTT servers. Features of this library include:
- Both fully asynchronous and blocking API functions.
- Thread-aware and parallelizable for high throughput.
- Scalable performance and footprint. The [configuration settings](@ref mqtt_config) allow this library to be tailored to a system's resources.

@attention Currently, this library does not support QoS 2 MQTT messages.

@dependencies_section{mqtt}
@dependencies_brief{MQTT library}

@dot "MQTT direct dependencies"
digraph mqtt_dependencies
{
    node[shape=box, fontname=Helvetica, fontsize=10, style=filled];
    edge[fontname=Helvetica, fontsize=10];
    subgraph
    {
        mqtt[label="MQTT", fillcolor="#cc00ccff"];
    }
    subgraph
    {
        node[fillcolor="#aed8a9ff"];
        rank = same;
        linear_containers[label="List/Queue", URL="@ref linear_containers"];
        logging[label="Logging", URL="@ref logging"];
        static_memory[label="Static memory", URL="@ref static_memory"];
    }
    subgraph
    {
        rank = same;
        platform_threads[label="Thread management", fillcolor="#e89025ff", URL="@ref platform_threads"];
        platform_clock[label="Clock", fillcolor="#e89025ff", URL="@ref platform_clock"];
        platform_network[label="Network", fillcolor="#e89025ff", URL="@ref platform_network"];
    }
    mqtt -> linear_containers;
    mqtt -> logging [label=" if logging enabled", style="dashed"];
    mqtt -> platform_threads;
    mqtt -> platform_clock;
    mqtt -> platform_network;
    mqtt -> static_memory [label=" if static memory only", style="dashed"];
    logging -> platform_clock;
    logging -> static_memory [label=" if static memory only", style="dashed"];
}
@enddot

Currently, the MQTT library has the following dependencies:
- The queue library for maintaining the data structures for managing in-progress MQTT operations.
- The logging library may be used if @ref IOT_LOG_LEVEL_MQTT is not #IOT_LOG_NONE.
- The platform layer provides an interface to the operating system for thread management, clock functions, networking, etc.

In addition to the components above, the MQTT library also depends on C standard library headers.
*/

/**
@page mqtt_design Design
@brief Architecture behind the MQTT library.

@image html mqtt_design_typicaloperation.png width=100%
*/

/**
@page mqtt_demo Demo
@brief The MQTT demo demonstrates usage of the MQTT library.

The MQTT demo demonstrates the subscribe-publish workflow of MQTT. After subscribing to multiple topic filters, it publishes [bursts](@ref IOT_DEMO_MQTT_PUBLISH_BURST_SIZE) of data to various topic names. The demo then waits for all messages in a burst to be received on a topic filter. As each message arrives, the demo publishes an acknowledgement message back to the MQTT server. It repeats this cycle @ref IOT_DEMO_MQTT_PUBLISH_BURST_COUNT times.

@image html mqtt_demo.png "MQTT Demo Workflow" width=80%

See @subpage mqtt_demo_config for configuration settings that change the behavior of the demo.

The main MQTT demo file is iot_demo_mqtt.c, which contains platform-independent code. See @ref building_demo for instructions on building the MQTT demo.
*/

/**
@page mqtt_tests Tests
@brief Tests written for the MQTT library.

The MQTT tests reside in the `tests/mqtt` directory. They are divided into the following subdirectories:
- `access`: Helper files that allow access to internal variables and functions of the MQTT library.
- `system`: MQTT system and stress tests. These tests require a network connection. Stress tests may run for a long time, so they are not run unless the command line option `-l` is given to the test executable.
- `unit`: MQTT unit tests. These tests do not require a network connection.

See @subpage mqtt_tests_config for configuration settings that change the behavior of the tests.

The current MQTT tests use the [Unity test framework](http://www.throwtheswitch.org/unity/) and only run on POSIX systems. See @ref building_tests for a guide on running the tests.
*/

/**
@config_page{mqtt_tests,Test}
@config_brief{mqtt_tests,MQTT tests,tests}

@section IOT_TEST_MQTT_CLIENT_IDENTIFIER
@brief The MQTT client identifier to use for the tests.

No two clients may connect using the same client identifier simultaneously. If this setting is undefined, the tests will generate a unique client identifier to use.

@configpossible Any string representing an MQTT client identifier. MQTT client identifiers may be subject to certain constraints; for example, servers are not obligated to accept client identifiers longer than 23 characters or client identifiers containing non-alphanumeric characters. <br>
@configdefault The tests will generate a unique client identifier if this setting is undefined.

@section IOT_TEST_MQTT_MOSQUITTO
@brief Test the MQTT library against the [public Mosquitto test server](https://test.mosquitto.org/).

When this setting is `1`, the MQTT tests will be built to test against an unsecured [public Mosquitto test server](https://test.mosquitto.org/). This allows the MQTT library to be tested against a fully-compliant MQTT server. Because the connection is unsecured, no credentials are needed for testing against Mosquitto.

@configpossible `0` (use AWS IoT MQTT server) or `1` (use public Mosquitto server) <br>
@configdefault `0`

<div class="configpagedivider">The settings below only affect the [system](@ref iot_tests_mqtt_system.c) and [stress](@ref iot_tests_mqtt_stress.c) tests.</div>

@section IOT_TEST_MQTT_TIMEOUT_MS
@brief Timeout in milliseconds for MQTT operations.

This value will be passed as `timeoutMs` to all calls to @ref mqtt_function_wait (and similar functions requiring a timeout). Ensure that this value is large enough to accommodate delays caused by the network.

@configpossible Any non-negative integer. <br>
@configrecommended This setting should be at least `1000`. <br>
@configdefault `5000`

@section IOT_TEST_MQTT_TOPIC_PREFIX
@brief The string prepended to topic filters.

This string will be prepended as the common part of topic filters as a way to differentiate MQTT traffic generated by the tests.

@configpossible Any string that adheres to the [specification for MQTT client identifiers](http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc385349242). <br>
@configdefault `"iotmqtttest"`

<div class="configpagedivider">The settings below only affect the [stress](@ref iot_tests_mqtt_stress.c) tests.</div>

@section IOT_TEST_MQTT_SHORT_KEEPALIVE_INTERVAL_S
@brief The keep-alive interval for the stress tests.

MQTT PINGREQ packets will be sent at this interval.

@configpossible Any positive integer. <br>
@configrecommended This value should be the shortest keep-alive interval supported by the connection. <br>
@configdefault `30` when using the AWS IoT MQTT server; `5` otherwise

@section IOT_TEST_MQTT_RETRY_MS
@brief The value of #IotMqttPublishInfo_t.retryMs used in the stress tests.

Any lost publish messages will be retransmitted at this time.

@configpossible Any positive integer. <br>
@configrecommended This setting should be at least `250` to avoid excessive network congestion caused by retransmissions. <br>
@configdefault `350`

@section IOT_TEST_MQTT_RETRY_LIMIT
@brief The value of #IotMqttPublishInfo_t.retryLimit used in the stress tests.

Any lost publish messages will be retried up to this limit.

@configpossible Any positive integer. <br>
@configdefault `32`

@section IOT_TEST_MQTT_DECONGEST_S
@brief The time to wait for resources to be freed.

Should an MQTT operation fail due to insufficient resources (such as a return value of @ref IOT_MQTT_NO_MEMORY), the test thread will sleep for this amount to time before retrying to wait for resources to be freed. Larger values for this setting provide a higher change for a successful retry, but will cause the tests to run longer.

@configpossible Any positive integer. <br>
@configdefault `30`

@section IOT_TEST_MQTT_THREADS
@brief The number of threads to use in the stress tests.

The number of threads to spawn for the stress tests. Up to @ref IOT_TEST_MQTT_THREADS `*` @ref IOT_TEST_MQTT_PUBLISHES_PER_THREAD publish messages are sent by stress test.

@configpossible Any positive integer. <br>
@configdefault `16`

@section IOT_TEST_MQTT_PUBLISHES_PER_THREAD
@brief The number of publish messages each thread in the stress test should send.

Up to @ref IOT_TEST_MQTT_THREADS `*` @ref IOT_TEST_MQTT_PUBLISHES_PER_THREAD publish messages are sent by stress test.

@configpossible Any non-negative integer. <br>
@configdefault When @ref IOT_STATIC_MEMORY_ONLY is `1`, this value defaults to @ref IOT_MQTT_MAX_IN_PROGRESS_OPERATIONS. Otherwise, it defaults to `100`.
*/

/**
@config_page{mqtt_demo,Demo}
@config_brief{mqtt_demo,MQTT demo,demos}

@section IOT_DEMO_MQTT_TOPIC_PREFIX
@brief The string prepended to topic filters in the demo.

The string will be prepended as the common part of topic filters as a way to differentiate MQTT traffic generated by the demo.

@configpossible Any string that adheres to the [specification for MQTT client identifiers](http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc385349242). <br>
@configdefault `"iotmqttdemo"`

@section IOT_DEMO_MQTT_PUBLISH_BURST_SIZE
@brief The number of messages published in each burst.

Messages in a burst are rapidly published. After a complete burst is published, the demo waits for the messages to be received on a subscription topic filter. This value may be increased for higher throughput, at the expense of an increased chance of dropped messages. The MQTT demo publishes a total of @ref IOT_DEMO_MQTT_PUBLISH_BURST_SIZE `*` @ref IOT_DEMO_MQTT_PUBLISH_BURST_COUNT messages.

@configpossible Any positive integer. <br>
@configdefault `10`

@section IOT_DEMO_MQTT_PUBLISH_BURST_COUNT
@brief The number of [publish bursts](@ref IOT_DEMO_MQTT_PUBLISH_BURST_SIZE) in this demo.

Each burst will rapidly publish @ref IOT_DEMO_MQTT_PUBLISH_BURST_SIZE messages. After publishing, the demo will wait for the published messages to be received on a subscription topic filter.

This setting can be increased for a longer demo. The MQTT demo publishes a total of @ref IOT_DEMO_MQTT_PUBLISH_BURST_SIZE `*` @ref IOT_DEMO_MQTT_PUBLISH_BURST_COUNT messages.

@configpossible Any positive integer. <br>
@configdefault `10`
*/

/**
@config_page{mqtt}
@config_brief{MQTT library}

@section IOT_MQTT_ENABLE_ASSERTS
@brief Set this to `1` to perform sanity checks when using the MQTT library.

Asserts are useful for debugging, but should be disabled in production code. If this is set to `1`, @ref IotMqtt_Assert can be defined to set the assertion function; otherwise, the standard library's [assert](http://pubs.opengroup.org/onlinepubs/9699919799/functions/assert.html) function will be used.

@configpossible `0` (asserts disabled) or `1` (asserts enabled)<br>
@configrecommended `1` when debugging; `0` in production code.<br>
@configdefault `0`

@section AWS_IOT_MQTT_ENABLE_METRICS
@brief Set this to `1` to enable anonymous metrics reporting to AWS IoT.

Metrics allow AWS IoT to prioritize engineering resources based on SDK usage. SDK name and version are reported; no personal or identifying information is reported.

@configpossible `0` (metrics reporting disabled) or `1` (metrics reporting enabled)<br>
@configrecommended `1`<br>
@configdefault `1`
@note This setting is only in effect for [MQTT connections with AWS IoT](@ref IotMqttConnectInfo_t.awsIotMqttMode). Metrics are reported through [the MQTT username.](@ref IotMqttConnectInfo_t.pUserName) The MQTT library may overwrite any provided user name if metrics are enabled.

@section IOT_MQTT_ENABLE_SERIALIZER_OVERRIDES
@brief Set this to `1` to allow the MQTT packet serializer and deserializer functions to be overridden.

Serializer overrides allow the functions that generate and decode MQTT packets to be overridden. When this setting is `1`, each connection may have different serializer and deserializer functions. This allows the MQTT library to be used as a general-purpose transport library (with limitations). Currently, this setting is used to support MQTT over Bluetooth Low-Energy on Amazon FreeRTOS. See #IotMqttSerializer_t for a list of functions that can be overridden. If this setting is `1`, the serializer [initialization](@ref _IotMqtt_InitSerialize) and [cleanup](@ref _IotMqtt_CleanupSerialize) functions may be extended by defining `_IotMqtt_InitSerializeAdditional` and `_IotMqtt_CleanupSerializeAdditional`. These functions will be called along with the default serializer initialization and cleanup functions. They must have the following signatures:
@code{c}
#include <stdbool.h>

// Returns true on success and false on failure.
bool _IotMqtt_InitSerializeAdditional( void );
void _IotMqtt_CleanupSerializeAdditional( void );
@endcode

@configpossible `0` (serializer overrides disabled) or `1` (serializer overrides enabled)<br>
@configrecommended The default value is <b>strongly recommended</b>.<br>
@configdefault The default value of this setting depends on the platform. For example, when running on FreeRTOS with BLE support, this setting will be automatically enabled. Conversely, when running on Linux, this setting will be disabled.

@section IOT_LOG_LEVEL_MQTT
@brief Set the log level of the MQTT library.

Log messages from the MQTT library at or below this setting will be printed.

@configpossible One of the @ref logging_constants_levels.<br>
@configdefault @ref IOT_LOG_LEVEL_GLOBAL; if that is undefined, then #IOT_LOG_NONE.

@section IOT_MQTT_RESPONSE_WAIT_MS
@brief A "reasonable amount of time" to wait for keep-alive responses from the MQTT server.

The MQTT spec states that if a response to a keep-alive request is not received within a "reasonable amount of time", the network connection should be closed. Since the meaning of "reasonable" depends heavily on use case, the amount of time to wait for keep-alive responses is defined by this setting. This setting is also used as the amount of time to wait for a final PUBACK to a QoS 1 PUBLISH message before returning #IOT_MQTT_RETRY_NO_RESPONSE. See #IotMqttPublishInfo_t for a description of QoS 1 PUBLISH retries.

@configpossible Any positive integer.<br>
@configdefault `1000`

@section IOT_MQTT_RETRY_MS_CEILING
@brief Controls the maximum [retry interval](@ref IotMqttPublishInfo_t.retryMs) of QoS 1 PUBLISH retransmissions.

QoS 1 PUBLISH retransmissions follow a truncated exponential backoff strategy. The interval of time between retransmissions increases exponentially until @ref IOT_MQTT_RETRY_MS_CEILING (or the [retransmission limit)](@ref IotMqttPublishInfo_t.retryLimit) is reached, then increases by @ref IOT_MQTT_RETRY_MS_CEILING until the [retransmission limit](@ref IotMqttPublishInfo_t.retryLimit) is reached.

@see #IotMqttPublishInfo_t for a detailed description of the QoS 1 PUBLISH retransmission strategy.

@configpossible Any positive integer.<br>
@configdefault `60000`

@section IotMqtt_Assert
@brief Assertion function used when @ref IOT_MQTT_ENABLE_ASSERTS is `1`.

@configpossible Any function with the same signature as the standard library's [assert](http://pubs.opengroup.org/onlinepubs/9699919799/functions/assert.html) function.<br>
@configdefault Standard library [assert](http://pubs.opengroup.org/onlinepubs/9699919799/functions/assert.html) function if @ref IOT_MQTT_ENABLE_ASSERTS is `1`; otherwise, nothing.

@section mqtt_config_memory Memory allocation
@brief If @ref IOT_STATIC_MEMORY_ONLY is `1`, then the following functions must be re-implemented for the MQTT library.
- #IotMqtt_MallocConnection <br>
  @copybrief IotMqtt_MallocConnection
- #IotMqtt_FreeConnection <br>
  @copybrief IotMqtt_FreeConnection
- #IotMqtt_MallocMessage <br>
  @copybrief IotMqtt_MallocMessage
- #IotMqtt_FreeMessage <br>
  @copybrief IotMqtt_FreeMessage
- #IotMqtt_MallocOperation <br>
  @copybrief IotMqtt_MallocOperation
- #IotMqtt_FreeOperation <br>
  @copybrief IotMqtt_FreeOperation
- #IotMqtt_MallocSubscription <br>
  @copybrief IotMqtt_MallocSubscription
- #IotMqtt_FreeSubscription <br>
  @copybrief IotMqtt_FreeSubscription
*/
