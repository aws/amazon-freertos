/**
@mainpage
@anchor pkcs11
@brief PKCS #11 Crypto Abstraction Library.

> PKCS #11 is a standard maintained by OASIS for interacting with cryptographic hardware.

<span style="float:right;margin-right:4em"> &mdash; <i>Official documentation of PKCS #11 from [oasis](http://docs.oasis-open.org/pkcs11/pkcs11-base/v2.40/os/pkcs11-base-v2.40-os.html)</i></span><br>

This PKCS #11 library implements a subset of the PKCS #11 API required to establish a secure connection to AWS IoT:
- Verifying the contents of a message.
- Signing a message.
- Managing certificates and keys.
- Generating random numbers.

@section PKCS11_Wrapper PKCS #11 Wrapper Dependencies

Currently, the PKCS #11 wrapper library has a dependency on FreeRTOS, the C standard library stdint and PKCS #11. This file, "iot_pkcs11.h" should always be included first as it
defines the macros that are needed by the standard PKCS #11 header files.

@dot "PKCS #11 wrapper direct dependencies"
digraph pkcs11_wrapper_dependencies
{
    node[shape=box, fontname=Helvetica, fontsize=10, style=filled];
    edge[fontname=Helvetica, fontsize=10];
    subgraph
    {
        pkcs11_wrapper[label="PKCS #11 Wrapper", fillcolor="#cc00ccff"];
    }
    subgraph
    {
        node[fillcolor="#aed8a9ff"];
        rank = same;
        pkcs11[label="PKCS #11"];
        freertos[label="FreeRTOS"];
    }

    pkcs11_wrapper -> pkcs11;
    pkcs11_wrapper -> freertos;
}
@enddot

@section PKCS11_implementation PKCS #11 Software Implementation Dependencies

PKCS #11 is a flexible library, and can easily be swapped out for other implementations. The PKCS #11 library documented here 
is a software based implementation, to allow for writing libraries and code that can easily interface with Hardware Security Modules (HSM).

Currently, the software based PKCS #11 library has the following dependencies:
- The API defined by the PKCS #11 specification. The headers used can be found [here](https://github.com/amazon-freertos/pkcs11/tree/v2.40_errata01).
- The PKCS #11 PAL layer. This is used for writing PKCS #11 objects to flash.
- FreeRTOS. This library uses FreeRTOS primitives, like semaphores.
- mbed TLS. This library uses mbed TLS for the cryptographic logic. Some examples include parsing key and certificate objects, signing operations, and creating digests.
- The standard C library string, for memory manipulation.

@dot "PKCS #11 implementation direct dependencies"
digraph pkcs11_software_implementation_dependencies
{
    node[shape=box, fontname=Helvetica, fontsize=10, style=filled];
    edge[fontname=Helvetica, fontsize=10];
    subgraph
    {
        pkcs11_software_implementation[label="PKCS #11 Software Implementation", fillcolor="#cc00ccff"];
    }
    subgraph
    {
        node[fillcolor="#aed8a9ff"];
        rank = same;
        pkcs11_wrapper[label="PKCS #11"];
        freertos[label="FreeRTOS"];
        mbedtls[label="mbed TLS"];
        pkcs11_pal[label="PKCS #11 PAL"];
    }

    pkcs11_software_implementation -> pkcs11_wrapper;
    pkcs11_software_implementation -> freertos;
    pkcs11_software_implementation -> mbedtls;
    pkcs11_software_implementation -> pkcs11_pal;
}
@enddot

@section PKCS11_utilities PKCS #11 Utilities

The PKI utils module is a forked version of the PKI utilities provided by mbed TLS. They are used to convert from
Currently, the module has the following dependencies:
The standard C library
FreeRTOS

@dot "PKCS #11 Utilities Dependencies"
digraph pkcs11_utils_dependencies
{
    node[shape=box, fontname=Helvetica, fontsize=10, style=filled];
    edge[fontname=Helvetica, fontsize=10];
    subgraph
    {
        pkcs11_utils[label="PKCS #11 Utilities", fillcolor="#cc00ccff"];
    }
    subgraph
    {
        node[fillcolor="#aed8a9ff"];
        rank = same;
        freertos[label="FreeRTOS"];
        stdlib[label="string.h"];
    }

    pkcs11_utils -> stdlib;
    pkcs11_utils -> freertos;
}
@enddot

@constants_page{pkcs11}
@constants_brief{PKCS #11 library}
@section pkcs11_pal_constants PKCS #11 PAL File Names

@constants_page{pkcs11}
@constants_brief{PKCS #11 library constants}
@section pkcs11_pal_constants PKCS #11 PAL File Names

@brief Provide file name mappings for the TLS client certificate, and keys.
This value can be modified to create custom .dat file names.

@warning If these values are not properly mapped to files in the Windows file system, located in the same location
as the solution, the application will fail to use them for it's TLS needs.

<b>Default values</b>
@code{c}
 #define pkcs11palFILE_NAME_CLIENT_CERTIFICATE    "FreeRTOS_P11_Certificate.dat"
 #define pkcs11palFILE_NAME_KEY                   "FreeRTOS_P11_Key.dat"
 #define pkcs11palFILE_CODE_SIGN_PUBLIC_KEY       "FreeRTOS_P11_CodeSignKey.dat"
@endcode
*/

/**
@config_page{pkcs11}
@config_brief{PKCS #11 library}

@section configPKCS11_DEFAULT_USER_PIN
@brief The default user pin for PKCS #11. This feature is generally not used for microcontroller based applications.

@configpossible Any four digit code
@configdefault `"0000"`

@section pkcs11configMAX_LABEL_LENGTH
@brief Max length of a PKCS #11 Label attribute

PKCS #11 uses labels to map human readable strings to a PKCS #11 object. This defines the maximum allowable length for such a string.<br>

@configpossible Any positive integer.<br>
@configdefault `32`

@section pkcs11configMAX_NUM_OBJECTS
@brief Maximum number of token objects that can be stored by the PKCS #11 module.<br>

@configpossible Any positive integer.<br>
@configdefault `6`


@section pkcs11configMAX_SESSIONS                           
@brief Maximum number of sessions that can be stored by the PKCS #11 module.<br>
The more sessions created, the higher RAM used by the PKCS #11 module.<br>
@configpossible Any positive integer.<br>
@configdefault 10

@section pkcs11testIMPORT_PRIVATE_KEY_SUPPORT
@brief Set to 1 if the PKCS #11 stack or device/hsm can load objects from an external source.<br>

@configpossible 0 or 1 <br>
@configdefault `0`

@section pkcs11testGENERATE_KEYPAIR_SUPPORT
@brief Set to 1 if the PKCS #11 stack or device/hsm can generate a key pair.<br>
@note The device should be able to store certificate onboard as well.<br>

@configpossible 0 or 1 <br>
@configdefault `0`

@section pkcs11testPREPROVISIONED_SUPPORT
@brief Set to 1 if the PKCS #11 stack or device/hsm is pre-provisioned with all objects necessary to connect to AWS IoT Core.<br>
@configpossible 0 or 1 <br>
@configdefault `0`

@section pkcs11configPAL_DESTROY_SUPPORTED
@brief Set to 1 if a PAL destroy object is implemented.

Set to 1 if a PAL destroy object is implemented. If not implemented PKCS #11 will not be able to destroy existing objects.

@configpossible Any positive integer.<br>
@configdefault `0`

@section pkcs11configLABEL_DEVICE_PRIVATE_KEY_FOR_TLS
@brief The PKCS #11 label for device private key.

The PKCS #11 label for device private key. Private key for connection to AWS IoT endpoint.
The corresponding public key should be registered with the AWS IoT endpoint.

@configpossible Any String smaller then pkcs11configMAX_LABEL_LENGTH.<br>
@configdefault `Device Priv TLS Key`


@section pkcs11configLABEL_DEVICE_PUBLIC_KEY_FOR_TLS
@brief The PKCS #11 label for device private key.

The public key corresponding to pkcs11configLABEL_DEVICE_PRIVATE_KEY_FOR_TLS.

@configpossible Any String smaller then pkcs11configMAX_LABEL_LENGTH.<br>
@configdefault `Device Pub TLS Key`

@section pkcs11configLABEL_DEVICE_CERTIFICATE_FOR_TLS
@brief The PKCS #11 label for the device certificate.
Device certificate corresponding to pkcs11configLABEL_DEVICE_PRIVATE_KEY_FOR_TLS.

@configpossible Any String smaller then pkcs11configMAX_LABEL_LENGTH.<br>
@configdefault `Device Cert`

@section pkcs11configLABEL_ROOT_CERTIFICATE 
@brief The PKCS #11 label for the AWS Trusted Root Certificate.

The PKCS #11 label for the AWS Trusted Root Certificate.

@configpossible Any String smaller then pkcs11configMAX_LABEL_LENGTH.<br>
@configdefault `Root Cert`
*/

/**
@functions_page{pkcs11}
@functions_brief{PKCS #11 Library}

- @subpage pkcs11_iot_functions <br>
  @copybrief pkcs11_iot_functions
- @subpage pkcs11_pal_functions <br>
  @copybrief pkcs11_pal_functions
- @subpage pkcs11_mbedtls_functions <br>
  @copybrief pkcs11_mbedtls_functions
- @subpage pkcs11_utils_functions <br>
  @copybrief pkcs11_utils_functions
*/

