%%{
/*
 * Copyright (c) 2018-2020 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== Display.Board.c.xdt ========
 */

    let Display      = args[0];
    let instances    = Display.$instances;
    if (instances == 0) { return; }

    let baudRate     = 0;
    let uartIndex;
    let uart2Index;
    let spiIndex;
    let lcdPowerIndex;
    let lcdEnableIndex;
    let lcdChipSelectIndex;

    let host = false;
    let uart = false;
    let uart2 = false;
    let lcd = false;

    let hostInstance = 0;
    let uartInstance = 0;
    let uart2Instance = 0;
    let lcdInstance = 0;

    let mutexTimeout            = 0;
    let mutexTimeoutValue       = 0;
    let mutexTimeoutInitializer = '(unsigned int)(-1)';

    let instAttrs = {};
    for (let i = 0; i < instances.length; i++) {
        let inst = instances[i];

        if (inst.displayType == "Host") {
            host = true;
            hostInstance = i;
            instAttrs[instances[i].$name] = {
                object: "displayHostObject",
                hwAttrs: "displayHostHWAttrs",
                fxnTablePtr: "DisplayHost_fxnTable"
            };
        }
        else if (inst.displayType == "UART") {
            if (inst.useUART2) {
                uart2 = true;
                uart2Instance = i;
                uart2Index = inst.uart.$name;
                instAttrs[instances[i].$name] = {
                    object: "displayUart2Object",
                    hwAttrs: "displayUart2HWAttrs",
                    fxnTablePtr: (inst.enableANSI == true) ?
                        "DisplayUart2Ansi_fxnTable" : "DisplayUart2Min_fxnTable"
                };
            }
            else {
                uart = true;
                uartInstance = i;
                uartIndex = inst.uart.$name;
                instAttrs[instances[i].$name] = {
                    object: "displayUartObject",
                    hwAttrs: "displayUartHWAttrs",
                    fxnTablePtr: (inst.enableANSI == true) ?
                        "DisplayUartAnsi_fxnTable" : "DisplayUartMin_fxnTable"
                };
            }

            baudRate          = inst.baudRate;
            mutexTimeout      = inst.mutexTimeout;
            mutexTimeoutValue = inst.mutexTimeoutValue;

            if (mutexTimeout == "Never Wait") {
                mutexTimeoutInitializer = '(unsigned int)(0)';
            }
            if (mutexTimeout == "Custom") {
                mutexTimeoutInitializer = '(unsigned int)'+ mutexTimeoutValue;
            }
        }
        else if (inst.displayType == "LCD") {
            lcd = true;
            lcdInstance = i;
            spiIndex = inst.spi.$name;
            lcdEnableIndex = inst.lcdEnable.$name;
            lcdPowerIndex = inst.lcdPower.$name;
            lcdChipSelectIndex = inst.lcdSS.$name;
            instAttrs[instances[i].$name] = {
                object: "displayLcdObject",
                hwAttrs: "displayLcdHWattrs",
                fxnTablePtr: "DisplaySharp_fxnTable"
            };
        }
    }

    let countDef = Display.defaultInstanceName + "COUNT";

%%}
/*
 *  ============================= Display =============================
 */

#include <ti/display/Display.h>
% if (uart) {
#include <ti/display/DisplayUart.h>
% }
% if (uart2) {
#include <ti/display/DisplayUart2.h>
% }
% if (lcd) {
#include <ti/display/DisplaySharp.h>
% }
% if (host) {
#include <ti/display/DisplayHost.h>
% }

#define `countDef` `instances.length`

% if (uart) {
#define Display_UARTBUFFERSIZE `instances[uartInstance].uartBufferSize`
static char displayUARTBuffer[Display_UARTBUFFERSIZE];

% }
% if (uart2) {
#define Display_UART2BUFFERSIZE `instances[uart2Instance].uartBufferSize`
static char displayUART2Buffer[Display_UART2BUFFERSIZE];

% }
% if (host) {
#define Display_HOSTBUFFERSIZE `instances[hostInstance].maxPrintLength`
static char displayHostBuffer[Display_HOSTBUFFERSIZE];

% }
% if (lcd) {
#define Display_LCDSIZE `instances[lcdInstance].lcdSize`
static uint_least8_t displayLCDBuffer[Display_LCDSIZE * Display_LCDSIZE / 8];

% }
% if (uart) {
DisplayUart_Object displayUartObject;
% }
% if (uart2) {
DisplayUart2_Object displayUart2Object;
% }
% if (host) {
DisplayHost_Object displayHostObject;
% }
% if (lcd) {
DisplaySharp_Object displayLcdObject;
% }

% if (uart) {
const DisplayUart_HWAttrs displayUartHWAttrs = {
    .uartIdx      = `uartIndex`,
    .baudRate     = `baudRate`,
    .mutexTimeout = `mutexTimeoutInitializer`,
    .strBuf       = displayUARTBuffer,
    .strBufLen    = Display_UARTBUFFERSIZE
};

% }
% if (uart2) {
const DisplayUart2_HWAttrs displayUart2HWAttrs = {
    .uartIdx      = `uart2Index`,
    .baudRate     = `baudRate`,
    .mutexTimeout = `mutexTimeoutInitializer`,
    .strBuf       = displayUART2Buffer,
    .strBufLen    = Display_UART2BUFFERSIZE
};

% }
% if (host) {
const DisplayHost_HWAttrs displayHostHWAttrs = {
    .strBuf = displayHostBuffer,
    .strBufLen = Display_HOSTBUFFERSIZE
};

% }
% if (lcd) {
const DisplaySharp_HWAttrsV1 displayLcdHWattrs = {
    .spiIndex    = `spiIndex`,
    .csPin       = `lcdChipSelectIndex`,
    .powerPin    = `lcdPowerIndex`,
    .enablePin   = `lcdEnableIndex`,
    .pixelWidth  = Display_LCDSIZE,
    .pixelHeight = Display_LCDSIZE,
    .displayBuf  = displayLCDBuffer,
};

% }
const Display_Config Display_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
%     let inst = instances[i];
%     let attrs = instAttrs[inst.$name];
    /* `inst.$name` */
%     if (inst.$hardware) {
%         if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
%         }
%     }
    {
        .fxnTablePtr = &`attrs.fxnTablePtr`,
        .object      = &`attrs.object`,
        .hwAttrs     = &`attrs.hwAttrs`
    },
% }
};

const uint_least8_t Display_count = `countDef`;
