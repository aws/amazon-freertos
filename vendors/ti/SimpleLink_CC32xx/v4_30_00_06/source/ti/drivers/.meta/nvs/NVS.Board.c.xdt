%%{
/*
 * Copyright (c) 2018-2020, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== NVS.Board.c.xdt ========
 */

     /* passed by /ti/drivers/templates/Board.c.xdt */
    let NVS = args[0];
    let instances = NVS.$instances;
    if (instances.length == 0) return;

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");
    let family = Common.device2Family(system.deviceData);

    let declarations = Common.genBoardDeclarations(instances);

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = NVS.defaultInstanceName + "COUNT";
    let nvsIntBoardAttrs = system.getTemplate("NVS" + family + ".Board.attrs.xdt");
    let nvsExtBoardAttrs = system.getTemplate("NVSSPI25X.Board.attrs.xdt");
    let nvsRamBoardAttrs = system.getTemplate("NVSRAM.Board.attrs.xdt");
    let nvsIntBoardConfig = system.getTemplate("NVS" + family + ".Board.config.xdt");
    let nvsExtBoardConfig = system.getTemplate("NVSSPI25X.Board.config.xdt");
    let nvsRamBoardConfig = system.getTemplate("NVSRAM.Board.config.xdt");
%%}
/*
 *  =============================== NVS ===============================
 */

#include <ti/drivers/NVS.h>`nvsIntBoardAttrs(NVS)``nvsExtBoardAttrs(NVS)``nvsRamBoardAttrs(NVS)`
#define `countDef` `instances.length`

const NVS_Config NVS_config[`countDef`] = {
`nvsIntBoardConfig(NVS)``nvsExtBoardConfig(NVS)``nvsRamBoardConfig(NVS)`};

`declarations`
const uint_least8_t NVS_count = `countDef`;
