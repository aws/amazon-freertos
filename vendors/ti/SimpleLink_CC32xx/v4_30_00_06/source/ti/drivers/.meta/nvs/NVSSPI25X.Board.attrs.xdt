%%{
/*
 * Copyright (c) 2018-2020 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== NVSSPI25X.Board.attrs.xdt ========
 */

    /* passed by /ti/drivers/templates/Board.c.xdt */
    let NVS = args[0];
    let instances   = NVS.$instances;

    /* collect external flash instances */
    let localInstances = [];
    let maxVerifyBufSize = 0;
    let handles = []; /* map to identify handle uniqueness */
    let handleNames = []; /* array of unique handle names */
    for (let i = 0; i < instances.length; i++) {
        let inst = instances[i];
        if (inst.nvsType == "External") {
            localInstances[localInstances.length] = inst;

            if ((inst.externalFlash.verifyBufferSize > maxVerifyBufSize)) {
                maxVerifyBufSize = inst.externalFlash.verifyBufferSize;
            }

            if (inst.externalFlash.spiFlashDevice.manager == "User") {
                if ((inst.externalFlash.spiFlashDevice.handle != "NULL") &&
                    (inst.externalFlash.spiFlashDevice.handle != "")) {
                    /* save unique handle names */
                    if (handles[inst.externalFlash.spiFlashDevice.handle] == null) {
                        handles[inst.externalFlash.spiFlashDevice.handle] = 1;
                        handleNames[handleNames.length] = inst.externalFlash.spiFlashDevice.handle;
                    }
                }
            }
        }
    }

    if (localInstances.length == 0) return;
%%}

#include <ti/drivers/nvs/NVSSPI25X.h>

/*
 *  NVSSPI25X External NVS flash region definitions
 */
% if (handleNames.length) {

%     for (let i = 0; i < handleNames.length; i++) {
extern SPI_Handle `handleNames[i]`;   /* User provided SPI spiFlashDevice */
%     }
% }
% if (maxVerifyBufSize) {

/*
 * Provide write verification buffer whose size is
 * the largest specified Verification Buffer Size
 */

static uint8_t verifyBuf[`maxVerifyBufSize`];

% }
% else {

% }
NVSSPI25X_Object nvsSPI25XObjects[`localInstances.length`];

static const NVSSPI25X_HWAttrs nvsSPI25XHWAttrs[`localInstances.length`] = {
% for (let i = 0; i < localInstances.length; i++) {
%     let inst = localInstances[i];
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .regionBaseOffset = 0x`inst.externalFlash.regionBase.toString(16)`,
        .regionSize = 0x`inst.externalFlash.regionSize.toString(16)`,
        .sectorSize = 0x`inst.externalFlash.sectorSize.toString(16)`,
    % if (inst.externalFlash.verifyBufferSize) {
        .verifyBuf = verifyBuf,
    % }
    % else {
        .verifyBuf = NULL,
    % }
        .verifyBufSize = `inst.externalFlash.verifyBufferSize`,
    % if (inst.externalFlash.spiFlashDevice.manager == "NVS") {
        /* NVS opens SPI */
        .spiHandle = NULL,
        % let spiIndex;
        % if (inst.externalFlash.spiFlashDevice.slaveSelectManager == "NVS") {
        %     spiIndex = inst.externalFlash.spiFlashDevice.sharedSpiInstance.$name;
        % } else {
        %     spiIndex = inst.externalFlash.spiFlashDevice.spiInstance.$name;
        % }
        /* SPI driver index */
        .spiIndex = `spiIndex`,
        .spiBitRate = `inst.externalFlash.spiFlashDevice.bitRate`,
    % }
    % else {
        /* User opens SPI */
        .spiHandle = &`inst.externalFlash.spiFlashDevice.handle`,
    % }
    % if (inst.externalFlash.spiFlashDevice.slaveSelectManager == "NVS") {
        /* GPIO driver pin index */
        .spiCsnGpioIndex = `inst.externalFlash.spiFlashDevice.slaveSelectGpioInstance.$name`,
    % }
    % else {
        /* SPI driver manages SPI flash CS */
        .spiCsnGpioIndex = NVSSPI25X_SPI_MANAGES_CS,
    % }
        .statusPollDelayUs = `inst.externalFlash.statusPollDelay`
    },
% }
};
