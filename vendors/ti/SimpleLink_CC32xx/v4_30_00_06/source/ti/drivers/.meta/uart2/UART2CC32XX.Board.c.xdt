%%{
/*
 * Copyright (c) 2020, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== UART2CC32XX.Board.c.xdt ========
 */

    let Common    = system.getScript("/ti/drivers/Common.js");

    let UART = args[0];

    let instances = UART.$instances;
    if (instances.length == 0) return;

    let declarations = Common.genBoardDeclarations(instances);
    let convertPinName = Common.cc32xxPackage2DevicePin;

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = UART.defaultInstanceName + "COUNT";

    let driver      = 'UART2CC32XX';

%%}
/*
 *  =============================== UART2 ===============================
 */

#include <ti/drivers/UART2.h>
#include <ti/devices/cc32xx/inc/hw_ints.h>
#include <ti/devices/cc32xx/inc/hw_memmap.h>
#include <ti/drivers/uart2/UART2CC32XX.h>

#define `countDef` `instances.length`

#define UART0_BASE UARTA0_BASE
#define UART1_BASE UARTA1_BASE
#define INT_UART0  INT_UARTA0
#define INT_UART1  INT_UARTA1

% for (let i = 0; i < instances.length; i++) {
%     let inst = instances[i];
static unsigned char uart2RxRingBuffer`i`[`inst.rxRingBufferSize`];
static unsigned char uart2TxRingBuffer`i`[`inst.txRingBufferSize`];
% }

% for (let i = 0; i < instances.length; i++) {
%     let inst        = instances[i];
%     let uart        = inst.uart;
%     let solution    = uart.$solution;
%     let peripheral  = system.deviceData.peripherals[solution.peripheralName];
%     let periphName = peripheral.name;
%     let position   = periphName.length - 1;
%     let modPeriph  = periphName.substr(0, position) + 'A'
%                          + periphName.substr(position);
%
%     let rxPinName   = driver + '_PIN_UNASSIGNED';
%     let txPinName   = driver + '_PIN_UNASSIGNED';
%     let ctsPinName  = driver + '_PIN_UNASSIGNED';
%     let rtsPinName  = driver + '_PIN_UNASSIGNED';
%     let rxDmaName   = driver + '_DMACH_UNASSIGNED';
%     let txDmaName   = driver + '_DMACH_UNASSIGNED';
%     if ('rxPin' in uart) {
%         let rxPinNum  = convertPinName(uart.rxPin.$solution.packagePinName);
%         rxPinName   = driver + '_PIN_'+rxPinNum+'_'+peripheral.name+'_RX';
%         let rxDma      = uart.rxDmaChannel.$solution.devicePinName;
%         rxDmaName      = rxDma + '_' + modPeriph + '_RX';
%     }
%     if ('txPin' in uart) {
%         let txPinNum = convertPinName(uart.txPin.$solution.packagePinName);
%         txPinName      = driver + '_PIN_'+txPinNum+'_'+peripheral.name+'_TX';
%         let txDma      = uart.txDmaChannel.$solution.devicePinName;
%         txDmaName      = txDma + '_' + modPeriph + '_TX';
%     }
%
%     let flowName;
%     if (inst.flowControl === false) {
%         flowName = 'UART2_FLOWCTRL_NONE';
%     }
%     else {
%         flowName      = 'UART2_FLOWCTRL_HARDWARE';
%         if ('ctsPin' in uart) {
%             let ctsPinNum = convertPinName(uart.ctsPin.$solution.packagePinName);
%             ctsPinName    = driver + '_PIN_'+ctsPinNum+'_'+peripheral.name+'_CTS';
%         }
%         if ('rtsPin' in uart) {
%             let rtsPinNum = convertPinName(uart.rtsPin.$solution.packagePinName);
%             rtsPinName    = driver + '_PIN_'+rtsPinNum+'_'+peripheral.name+'_RTS';
%         }
%     }

`driver`_Object uart2CC32XXObjects`i`;

static const `driver`_HWAttrs uart2CC32XXHWAttrs`i` = {
    .baseAddr           = `peripheral.name`_BASE,
    .intNum             = INT_`peripheral.name`,
    .intPriority        = `Common.intPriority2Hex(inst.interruptPriority)`,
    .flowControl        = `flowName`,
    .rxDmaChannel       = `rxDmaName`,
    .txDmaChannel       = `txDmaName`,
    .rxPin              = `rxPinName`,
    .txPin              = `txPinName`,
    .ctsPin             = `ctsPinName`,
    .rtsPin             = `rtsPinName`,
    .rxBufPtr           = uart2RxRingBuffer`i`,
    .rxBufSize          = sizeof(uart2RxRingBuffer`i`),
    .txBufPtr           = uart2TxRingBuffer`i`,
    .txBufSize          = sizeof(uart2TxRingBuffer`i`)
  };
% }

const UART2_Config UART2_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
%     let inst    = instances[i];
    {   /* `inst.$name` */
        .object      = &uart2CC32XXObjects`i`,
        .hwAttrs     = &uart2CC32XXHWAttrs`i`
    },
% }
};

`declarations`
const uint_least8_t UART2_count = `countDef`;
