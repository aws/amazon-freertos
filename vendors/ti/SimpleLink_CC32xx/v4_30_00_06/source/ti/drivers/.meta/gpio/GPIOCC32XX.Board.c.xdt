%%{
/*
 * Copyright (c) 2018-2020 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== GPIOCC32XX.Board.c.xdt ========
 */

    /* GPIO module passed in args[] */
    let GPIO = args[0];

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    if (GPIO.$instances.length == 0) return;

    let instances = GPIO.$instances;

    /* generate a list of all extern references */
    let externs = [];
    let addCallback = {};
    let callbackCount = 0;
    let gpioInterruptPriority = Common.intPriority2Hex(GPIO.$static.interruptPriority);

    /* set 'addCallback' on all instances which require a callback */
    callbackCount = GPIO.moduleStatic.collectCallbacks(instances, externs, addCallback);

    /* sort the instances now that their 'addCallback' configs have been initialized */
    instances = GPIO.sort(GPIO.$instances, addCallback);

    let declarations = Common.genBoardDeclarations(instances);

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = GPIO.defaultInstanceName + "COUNT";
%%}
/*
 *  =============================== GPIO ===============================
 */

#include <ti/drivers/GPIO.h>
#include <ti/drivers/gpio/GPIOCC32XX.h>

#define `countDef` `instances.length`

/*
 *  ======== gpioPinConfigs ========
 *  Array of Pin configurations
 */
GPIO_PinConfig gpioPinConfigs[] = {
% let pinsAreGrouped = false;
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % if ((GPIO.$static.optimizeCallbackTableSize == true) && (i == 0)
    %     && (addCallback[inst.$name] == true) && (callbackCount != 0)) {
    /* Pins with callbacks */

    % }
    % if ((GPIO.$static.optimizeCallbackTableSize == true)
    %     && (pinsAreGrouped == false)
    %     && (callbackCount != 0) && (addCallback[inst.$name] == false)) {
    %    pinsAreGrouped = true;

    /* Pins without callbacks */

    % }
    % let pin, port;
    % if (inst.nullEntry == true) {
    %     pin = "";
    %     port = "EMPTY_PIN";
    % }
    % else {
    %     pin = inst.gpioPin;
    %     port = "GPIO_" + pin.$solution.peripheralPinName.substring(4);
    % }
    % let line = "    GPIOCC32XX_" + port + " | "
    % + GPIO.moduleStatic.getAttrs(inst);
    % if (inst.enableStaticParking) {
    % line += " | " + "GPIOCC32XX_USE_STATIC";
    % }
    % line += ",";
    %
    % line = GPIO.moduleStatic.addComment(line, inst, i, pin);
`line`
% }
};

% if (callbackCount != 0) {
/*
 *  ======== gpioCallbackFunctions ========
 *  Array of callback function pointers
% if (GPIO.$static.optimizeCallbackTableSize == false) {
 *
 *  NOTE: Unused callback entries can be omitted from the callbacks array to
 *  reduce memory usage by enabling callback table optimization
 *  (GPIO.optimizeCallbackTableSize = true)
% }
 */
% if (externs.length > 0) {
`externs.join('\n')`

% }
GPIO_CallbackFxn gpioCallbackFunctions[] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % if (addCallback[inst.$name] == true) {
    %     let pin;
    %     if (inst.nullEntry == true) {
    %         pin = "";
    %     }
    %     else {
    %         pin = inst.gpioPin;
    %     }
    %     let callback = "    ";
    %     callback += (inst.callbackFunction == "" ? "NULL" : inst.callbackFunction) + ",";
    %     callback = GPIO.moduleStatic.addComment(callback, inst, i, pin);
`callback`
    % }
% }
};

% }
`declarations`

/*
 *  ======== GPIOCC32XX_config ========
 */
const GPIOCC32XX_Config GPIOCC32XX_config = {
    .pinConfigs = (GPIO_PinConfig *)gpioPinConfigs,
% if (callbackCount != 0) {
    .callbacks = (GPIO_CallbackFxn *)gpioCallbackFunctions,
% } else {
    .callbacks = NULL,
% }
    .numberOfPinConfigs = `instances.length`,
    .numberOfCallbacks = `callbackCount`,
    .intPriority = `gpioInterruptPriority`
};
