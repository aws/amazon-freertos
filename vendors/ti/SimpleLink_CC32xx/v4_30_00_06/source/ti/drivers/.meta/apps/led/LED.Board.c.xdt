%%{
/*
 * Copyright (c) 2019-2020 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== LED.Board.c.xdt ========
 */

    let LED = args[0];
    let instances = [];
    for (var i = 0; i < LED.$instances.length; i++) {
        var inst = LED.$instances[i];
        if (inst.gpioPin || inst.pwmPin) {
            instances.push(inst);
        }
    }

    if (instances.length == 0) return;

    /* get Common /ti/drivers utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    let declarations = Common.genBoardDeclarations(instances);

    /* CONFIG_XXXCOUNT string, derived from defaultInstanceName */
    let countDef = LED.defaultInstanceName + "COUNT";
%%}
/*
 *  =============================== LED ===============================
 */
#include <ti/drivers/apps/LED.h>

#define `countDef` `instances.length`
LED_Object LEDObjects[`countDef`];

static const LED_HWAttrs LEDHWAttrs[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
    % let inst = instances[i];
    % let devPin;
    % inst.pwmPin ? devPin = inst.pwmPin : devPin = inst.gpioPin;
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .type = LED_`inst.dimmable ? "PWM" : "GPIO"`_CONTROLLED,
        .index = `devPin.$name`,
    },
% }
};

const LED_Config LED_config[`countDef`] = {
% for (let i = 0; i < instances.length; i++) {
%     let inst = instances[i];
    /* `inst.$name` */
    % if (inst.$hardware) {
    %    if (inst.$hardware.displayName) {
    /* `inst.$hardware.displayName` */
    %    }
    % }
    {
        .object = &LEDObjects[`inst.$name`],
        .hwAttrs = &LEDHWAttrs[`inst.$name`]
    },
% }
};

`declarations`
const uint_least8_t LED_count = `countDef`;
