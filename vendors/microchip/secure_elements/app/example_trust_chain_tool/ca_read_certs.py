import os
import base64
import argparse
import pytz
import binascii
import ctypes

import datetime
import cryptography
from cryptoauthlib import *
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization

from common import *

ROOT_PUBKEY_SLOT = 15

ATCACERT_DEF_SIGNER_CONFIG_ELEMENTS = (atcacert_cert_element_t*3)(
    atcacert_cert_element_t(
#        id='IssueDate',
        device_loc = atcacert_device_loc_t(**{
            'zone': atcacert_device_zone_t.DEVZONE_DATA,
            'slot': 14,
            'is_genkey': 0,
            'offset': 35-13,
            'count': 13}),
        cert_loc= atcacert_cert_loc_t(offset=97, count=13)
    ),
    atcacert_cert_element_t(
#        id='ExpireDate',
        device_loc = atcacert_device_loc_t(**{
            'zone': atcacert_device_zone_t.DEVZONE_DATA,
            'slot': 14,
            'is_genkey': 0,
            'offset': 50-13,
            'count': 13}),
        cert_loc = atcacert_cert_loc_t(offset=112, count=13)
    ),
    atcacert_cert_element_t(
#        id='AuthorityKeyId',
        device_loc = atcacert_device_loc_t(**{
            'zone': atcacert_device_zone_t.DEVZONE_DATA,
            'slot': 8,
            'is_genkey': 0,
            'offset': 0,
            'count': 20}),
        cert_loc = atcacert_cert_loc_t(offset=354, count=20)
    )
)

ATCACERT_DEF_SIGNER_TEMPLATE = bytearray([
    0x30, 0x82, 0x01, 0xc8, 0x30, 0x82, 0x01, 0x6e,  0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x57,
    0x06, 0x2e, 0xf0, 0x05, 0xea, 0x8a, 0x70, 0x44,  0xff, 0x1b, 0x90, 0x00, 0x21, 0x78, 0xd6, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,  0x04, 0x03, 0x02, 0x30, 0x30, 0x31, 0x14, 0x30,
    0x12, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0b,  0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20,
    0x49, 0x6e, 0x63, 0x31, 0x18, 0x30, 0x16, 0x06,  0x03, 0x55, 0x04, 0x03, 0x0c, 0x0f, 0x45, 0x78,
    0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x52, 0x6f,  0x6f, 0x74, 0x20, 0x43, 0x41, 0x30, 0x1e, 0x17,
    0x0d, 0x31, 0x37, 0x30, 0x36, 0x30, 0x37, 0x31,  0x37, 0x35, 0x36, 0x31, 0x32, 0x5a, 0x17, 0x0d,
    0x32, 0x37, 0x30, 0x36, 0x30, 0x37, 0x31, 0x37,  0x35, 0x36, 0x31, 0x32, 0x5a, 0x30, 0x34, 0x31,
    0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x0a,  0x0c, 0x0b, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
    0x65, 0x20, 0x49, 0x6e, 0x63, 0x31, 0x1c, 0x30,  0x1a, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x13,
    0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20,  0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x20, 0x46,
    0x46, 0x46, 0x46, 0x30, 0x59, 0x30, 0x13, 0x06,  0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01,
    0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03,  0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xb1, 0xf5,
    0x9c, 0xbe, 0x22, 0x11, 0x7f, 0x28, 0x2f, 0x7f,  0x2e, 0xcb, 0xa2, 0x8c, 0x30, 0x3b, 0xae, 0x59,
    0x45, 0xb9, 0x5c, 0x0e, 0xba, 0xaa, 0x9b, 0x81,  0x73, 0x52, 0x63, 0x41, 0xbf, 0x37, 0x3c, 0x2e,
    0xdd, 0xcd, 0xea, 0x0e, 0x7c, 0x9d, 0x90, 0xea,  0x25, 0x9c, 0x64, 0xeb, 0xc6, 0x54, 0x47, 0x32,
    0x81, 0x63, 0xbf, 0x42, 0x5f, 0xdd, 0x5a, 0x3f,  0xd5, 0x71, 0x81, 0x9b, 0x77, 0x44, 0xa3, 0x66,
    0x30, 0x64, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1d,  0x13, 0x01, 0x01, 0xff, 0x04, 0x08, 0x30, 0x06,
    0x01, 0x01, 0xff, 0x02, 0x01, 0x00, 0x30, 0x0e,  0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff,
    0x04, 0x04, 0x03, 0x02, 0x01, 0x86, 0x30, 0x1d,  0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04,
    0x14, 0x81, 0x1d, 0xc6, 0x7c, 0x0f, 0x18, 0x2b,  0x65, 0x96, 0xeb, 0x22, 0x73, 0xdb, 0xf3, 0x23,
    0x63, 0x6d, 0x79, 0x0f, 0xc8, 0x30, 0x1f, 0x06,  0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16,
    0x80, 0x14, 0xdb, 0x2a, 0x0d, 0x06, 0x05, 0xc7,  0x98, 0xbc, 0xda, 0xc0, 0x34, 0x67, 0x66, 0xf4,
    0xe2, 0xb0, 0x61, 0xa3, 0xd2, 0xc8, 0x30, 0x0a,  0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04,
    0x03, 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02,  0x20, 0x49, 0xfe, 0xdf, 0xc9, 0x94, 0xe3, 0x07,
    0xdb, 0x08, 0xb3, 0x99, 0x9e, 0x04, 0xe4, 0x78,  0xe5, 0xf8, 0xb9, 0x09, 0xa9, 0xf0, 0x41, 0x66,
    0xc6, 0x69, 0x1b, 0x87, 0x30, 0x86, 0x10, 0xaf,  0x64, 0x02, 0x21, 0x00, 0xc8, 0xd6, 0x86, 0x61,
    0x94, 0x95, 0xdb, 0x45, 0xb3, 0x40, 0x8e, 0xac,  0x14, 0x9a, 0x19, 0xb6, 0x8c, 0x5c, 0x79, 0x9d,
    0x06, 0xcb, 0x52, 0x08, 0xa0, 0x1f, 0x49, 0x8b,  0x22, 0x4e, 0x52, 0x71
])

ATCACERT_DEF_SIGNER_CONFIG = {
    'type': atcacert_cert_type_t.CERTTYPE_X509,
    'template_id': 1,
    'chain_id': 0,
    'private_key_slot': 0,
    'sn_source': atcacert_cert_sn_src_t.SNSRC_STORED,
    'cert_sn_dev_loc': {
        'zone': atcacert_device_zone_t.DEVZONE_DATA,
        'slot': 14,
        'is_genkey': 0,
        'offset': 20-16,
        'count': 16
    },
    'issue_date_format': atcacert_date_format_t.DATEFMT_RFC5280_UTC,
    'expire_date_format': atcacert_date_format_t.DATEFMT_RFC5280_UTC,
    'tbs_cert_loc': {'offset': 4, 'count': 370},
    'expire_years': 10,
    'public_key_dev_loc': {
        'zone': atcacert_device_zone_t.DEVZONE_DATA,
        'slot': 11,
        'is_genkey': 0,
        'offset': 0,
        'count': 72
    },
    'comp_cert_dev_loc': {
        'zone': atcacert_device_zone_t.DEVZONE_DATA,
        'slot': 12,
        'is_genkey': 0,
        'offset': 0,
        'count': 72
    },
    'std_cert_elements' : [
        {'offset': 206, 'count': 64},
        {'offset': 386, 'count': 74},
        {'offset': 97, 'count': 13},
        {'offset': 112, 'count': 13},
        {'offset': 175, 'count': 4},
        {'offset': 15, 'count': 16},
        {'offset': 354, 'count': 20},
        {'offset': 321, 'count': 20},
    ],
    'cert_elements': ctypes.cast(ATCACERT_DEF_SIGNER_CONFIG_ELEMENTS, ctypes.POINTER(atcacert_cert_element_t)),
    'cert_elements_count': len(ATCACERT_DEF_SIGNER_CONFIG_ELEMENTS)
}

ATCACERT_DEF_DEVICE_CONFIG_ELEMENTS = (atcacert_cert_element_t*2)(
    atcacert_cert_element_t(
#        id='SN03',
        device_loc = atcacert_device_loc_t(**{
            'zone': atcacert_device_zone_t.DEVZONE_CONFIG,
            'slot': 0,
            'is_genkey': 0,
            'offset': 0,
            'count': 4}),
        cert_loc= atcacert_cert_loc_t(offset=166, count=8),
    ),
    atcacert_cert_element_t(
#        id='SN48',
        device_loc = atcacert_device_loc_t(**{
            'zone': atcacert_device_zone_t.DEVZONE_CONFIG,
            'slot': 0,
            'is_genkey': 0,
            'offset': 8,
            'count': 5}),
        cert_loc= atcacert_cert_loc_t(offset=174, count=10),
    )
)

ATCACERT_DEF_DEVICE_CONFIG_ELEMENTS[0].transforms[0] = atcacert_transform_t.TF_BIN2HEX_UC
ATCACERT_DEF_DEVICE_CONFIG_ELEMENTS[1].transforms[0] = atcacert_transform_t.TF_BIN2HEX_UC


ATCACERT_DEF_DEVICE_TEMPLATE = bytearray([
    0x30, 0x82, 0x01, 0xaa, 0x30, 0x82, 0x01, 0x4f, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x5b,
    0x20, 0x91, 0xb2, 0xf2, 0xde, 0xad, 0x83, 0x59, 0xd6, 0x76, 0xd3, 0x6a, 0x41, 0x9a, 0x9f, 0x30,
    0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04, 0x03, 0x02, 0x30, 0x34, 0x31, 0x14, 0x30,
    0x12, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0b, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20,
    0x49, 0x6e, 0x63, 0x31, 0x1c, 0x30, 0x1a, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x13, 0x45, 0x78,
    0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x20, 0x46, 0x46, 0x46,
    0x46, 0x30, 0x20, 0x17, 0x0d, 0x31, 0x39, 0x30, 0x38, 0x30, 0x35, 0x32, 0x31, 0x30, 0x30, 0x30,
    0x30, 0x5a, 0x18, 0x0f, 0x33, 0x30, 0x30, 0x30, 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x35, 0x39,
    0x35, 0x39, 0x5a, 0x30, 0x33, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0b,
    0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x6e, 0x63, 0x31, 0x1b, 0x30, 0x19, 0x06,
    0x03, 0x55, 0x04, 0x03, 0x0c, 0x12, 0x30, 0x31, 0x32, 0x33, 0x30, 0x31, 0x30, 0x32, 0x30, 0x33,
    0x30, 0x34, 0x30, 0x35, 0x30, 0x36, 0x30, 0x31, 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2a, 0x86,
    0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x03, 0x01, 0x07, 0x03,
    0x42, 0x00, 0x04, 0xce, 0x08, 0x69, 0xf9, 0x0b, 0x2d, 0x52, 0x13, 0xa6, 0xcc, 0xa0, 0x46, 0x10,
    0xbe, 0xee, 0x06, 0x3b, 0x1a, 0x05, 0xbc, 0x9a, 0x35, 0x33, 0x0b, 0x5c, 0xa2, 0xd2, 0x5b, 0xbf,
    0x3e, 0x6d, 0xda, 0x0f, 0xf5, 0xb2, 0x93, 0x3a, 0xba, 0xa2, 0x2a, 0x4f, 0x46, 0xcc, 0x59, 0x3d,
    0x0a, 0x1b, 0x61, 0x1c, 0x5b, 0x31, 0xf9, 0x3e, 0xd4, 0x16, 0x2b, 0x61, 0x6d, 0x85, 0xad, 0x45,
    0xfd, 0x19, 0xc3, 0xa3, 0x42, 0x30, 0x40, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16,
    0x04, 0x14, 0x36, 0xa0, 0xa1, 0x06, 0xdc, 0xf7, 0x54, 0xcd, 0x0f, 0xe6, 0x0c, 0x2b, 0x7e, 0x76,
    0xde, 0x42, 0xe1, 0x85, 0xac, 0xea, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30,
    0x16, 0x80, 0x14, 0x5e, 0x2e, 0xb8, 0xc9, 0xde, 0x81, 0x6f, 0x92, 0xd0, 0x0b, 0x45, 0x43, 0xb0,
    0x67, 0x8d, 0x75, 0xb2, 0xa9, 0xe2, 0x96, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
    0x04, 0x03, 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00, 0x98, 0x6c, 0xdd, 0x2e, 0x47,
    0x37, 0xe8, 0xb5, 0x5e, 0x55, 0x5c, 0x17, 0x3c, 0x12, 0xc6, 0x91, 0x6b, 0xe8, 0x53, 0xbc, 0x74,
    0xe6, 0x8b, 0x21, 0x91, 0x73, 0xca, 0xe3, 0xd2, 0x53, 0x18, 0xb4, 0x02, 0x21, 0x00, 0xaf, 0xd3,
    0x69, 0xf8, 0x85, 0x43, 0xca, 0x8c, 0xde, 0xcd, 0x36, 0xee, 0x9a, 0x13, 0x33, 0xc0, 0xe1, 0x03,
    0x97, 0xd3, 0xaf, 0x9e, 0x70, 0x03, 0x83, 0x95, 0x77, 0x6b, 0x9e, 0x5e, 0xb6, 0x6a
])

ATCACERT_DEF_DEVICE_CONFIG = {
    'type': atcacert_cert_type_t.CERTTYPE_X509,
    'template_id': 2,
    'chain_id': 0,
    'private_key_slot': 0,
    'sn_source': atcacert_cert_sn_src_t.SNSRC_PUB_KEY_HASH,
    'cert_sn_dev_loc': {
        'zone': atcacert_device_zone_t.DEVZONE_NONE,
        'slot': 0,
        'is_genkey': 0,
        'offset': 0,
        'count': 0
    },
    'issue_date_format': atcacert_date_format_t.DATEFMT_RFC5280_UTC,
    'expire_date_format': atcacert_date_format_t.DATEFMT_RFC5280_GEN,
    'tbs_cert_loc': {'offset': 4, 'count': 339},
    'expire_years': 0,
    'public_key_dev_loc': {
        'zone': atcacert_device_zone_t.DEVZONE_DATA,
        'slot': 0,
        'is_genkey': 1,
        'offset': 0,
        'count': 64
    },
    'comp_cert_dev_loc': {
        'zone': atcacert_device_zone_t.DEVZONE_DATA,
        'slot': 10,
        'is_genkey': 0,
        'offset': 0,
        'count': 72
    },
    'std_cert_elements' : [
        {'offset': 211, 'count': 64},
        {'offset': 355, 'count': 75},
        {'offset': 101, 'count': 13},
        {'offset': 0, 'count': 0},
        {'offset': 93, 'count': 4},
        {'offset': 15, 'count': 16},
        {'offset': 323, 'count': 20},
        {'offset': 290, 'count': 20},
    ],
    'cert_elements': ctypes.cast(ATCACERT_DEF_DEVICE_CONFIG_ELEMENTS, ctypes.POINTER(atcacert_cert_element_t)),
    'cert_elements_count': len(ATCACERT_DEF_DEVICE_CONFIG_ELEMENTS)
}

signer_cert_def = atcacert_def_t(**ATCACERT_DEF_SIGNER_CONFIG)
signer_cert_def.cert_template_size = len(ATCACERT_DEF_SIGNER_TEMPLATE)
signer_cert_def.cert_template = ctypes.POINTER(ctypes.c_uint8)(create_string_buffer(bytes(ATCACERT_DEF_SIGNER_TEMPLATE),
                                       len(ATCACERT_DEF_SIGNER_TEMPLATE)))


device_cert_def = atcacert_def_t(**ATCACERT_DEF_DEVICE_CONFIG)
device_cert_def.cert_template_size = len(ATCACERT_DEF_DEVICE_TEMPLATE)
device_cert_def.cert_template =  ctypes.POINTER(ctypes.c_uint8)(create_string_buffer(bytes(ATCACERT_DEF_DEVICE_TEMPLATE),
                                       len(ATCACERT_DEF_DEVICE_TEMPLATE)))



def read_signer(signer_file):
    cert = bytearray(1024)
    cert_len = AtcaReference(len(cert))
    assert Status.ATCA_SUCCESS == atcacert_read_cert(signer_cert_def, bytearray(), cert, cert_len)

    # Load the Signing Certificate from the file
    with open(signer_file, 'wb') as f:
        signer = x509.load_der_x509_certificate(cert, default_backend())
        f.write(signer.public_bytes(encoding=serialization.Encoding.PEM))

def read_device(device_file):

    public_key = bytearray(64)
    assert Status.ATCA_SUCCESS == atcab_read_pubkey(signer_cert_def.public_key_dev_loc.slot, public_key)

    cert = bytearray(1024)
    cert_len = AtcaReference(len(cert))
    assert Status.ATCA_SUCCESS == atcacert_read_cert(device_cert_def, public_key, cert, cert_len)

    # Load the Signing Certificate from the file
    with open(device_file, 'wb') as f:
        device = x509.load_der_x509_certificate(cert, default_backend())
        f.write(device.public_bytes(encoding=serialization.Encoding.PEM))


if __name__ == '__main__':
    # Create argument parser to document script use
    parser = argparse.ArgumentParser(description='Programs a certificate chain into a device using the provided definitions')
    parser.add_argument('--cert', default='device.qa', help='Certificate file of the device (PEM)')
    parser.add_argument('--signer', default='signer-ca.qa', help='Certificate file of the signer (PEM)')
    args = parser.parse_args()

    assert atcab_init(cfg_ateccx08a_kithid_default()) == Status.ATCA_SUCCESS
    read_signer(args.signer)
    read_device(args.cert)

