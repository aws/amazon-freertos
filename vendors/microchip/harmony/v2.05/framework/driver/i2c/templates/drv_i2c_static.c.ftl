/*******************************************************************************
  I2C Driver Functions for Static Single Instance Driver

  Company:
    Microchip Technology Inc.

  File Name:
    drv_i2c_static.c
	
  Summary:
    I2C driver impementation for the static single instance driver.

  Description:
    The I2C device driver provides a simple interface to manage the I2C
    modules on Microchip microcontrollers. This file contains implemenation
    for the I2C driver.
    
  Remarks:
    Static interfaces incorporate the driver instance number within the names
    of the routines, eliminating the need for an object ID or object handle.
    
    Static single-open interfaces also eliminate the need for the open handle.
*******************************************************************************/

//DOM-IGNORE-BEGIN
/*******************************************************************************
Copyright (c) 2013 released Microchip Technology Inc.  All rights reserved.

Microchip licenses to you the right to use, modify, copy and distribute
Software only when embedded on a Microchip microcontroller or digital signal
controller that is integrated into your product or third party product
(pursuant to the sublicense terms in the accompanying license agreement).

You should refer to the license agreement accompanying this Software for
additional information regarding your rights and obligations.

SOFTWARE AND DOCUMENTATION ARE PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND,
EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF
MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE.
IN NO EVENT SHALL MICROCHIP OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER
CONTRACT, NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR
OTHER LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE OR
CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF
SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
(INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
*******************************************************************************/
#include "framework/driver/i2c/drv_i2c_static.h"

<#if CONFIG_PIC32MZ == true && CONFIG_DEVICE?contains("EC") >
static uint32_t ReadCoreTimer(void);

static uint32_t ReadCoreTimer()
{
    volatile uint32_t timer;

    // get the count reg
    asm volatile("mfc0   %0, $9" : "=r"(timer));

    return(timer);
}
</#if>

<#macro DRV_I2C_STATIC_FUNCTIONS DRV_INSTANCE I2C_INSTANCE MODE SLEW_RATE BRG_CLOCK BAUD SMBus_SPEC 
ADDRESS_WIDTH STRICT_ADDRESS_RULE GENERAL_ADDRESS CLOCK_STRETCH ADDRESS_MASK SLAVE_ADDRESS MASTER_INT_SRC 
SLAVE_INT_SRC ERR_INT_SRC INT_VECTOR ISR_VECTOR INT_PRIORITY INT_SUB_PRIORITY MASTER_INT_VECTOR 
MASTER_ISR_VECTOR MASTER_INT_PRIORITY MASTER_INT_SUB_PRIORITY SLAVE_INT_VECTOR SLAVE_ISR_VECTOR 
SLAVE_INT_PRIORITY SLAVE_INT_SUB_PRIORITY ERR_INT_VECTOR ERR_INT_PRIORITY ERR_INT_SUB_PRIORITY PWR_MODE>

<#if MODE == "DRV_I2C_MODE_MASTER" && CONFIG_PIC32MZ == true && CONFIG_DEVICE?contains("EC") >

#define BAUD_RATE_${DRV_INSTANCE}         ${BAUD}
#define BRG_1_TIME_${DRV_INSTANCE}        SYS_CLK_PeripheralFrequencyGet(CLK_BUS_PERIPHERAL_2)/(2*BAUD_RATE_${DRV_INSTANCE})
</#if>
// *****************************************************************************
// *****************************************************************************
// Section: Instance ${DRV_INSTANCE} static driver functions
// *****************************************************************************
// *****************************************************************************
void DRV_I2C${DRV_INSTANCE}_Initialize(void)
{
    /* Initialize I2C${DRV_INSTANCE} */
<#if MODE == "DRV_I2C_MODE_MASTER">
<#if CONFIG_PIC32MX == true>
    PLIB_I2C_BaudRateSet(${I2C_INSTANCE}, SYS_CLK_PeripheralFrequencyGet(CLK_BUS_PERIPHERAL_1), ${BAUD});
<#else>
    PLIB_I2C_BaudRateSet(${I2C_INSTANCE}, SYS_CLK_PeripheralFrequencyGet(CLK_BUS_PERIPHERAL_2), ${BAUD});
</#if>
<#if PWR_MODE == "SYS_MODULE_POWER_IDLE_STOP">
    PLIB_I2C_StopInIdleEnable(${I2C_INSTANCE});
<#else>
    PLIB_I2C_StopInIdleDisable(${I2C_INSTANCE});
</#if>
<#if SLEW_RATE == true>

    /* High frequency is enabled (**NOTE** PLIB function logic inverted) */
    PLIB_I2C_HighFrequencyDisable(${I2C_INSTANCE});
<#else>

    /* Low frequency is enabled (**NOTE** PLIB function logic inverted) */
    PLIB_I2C_HighFrequencyEnable(${I2C_INSTANCE});
</#if>
<#else>
<#if ADDRESS_WIDTH == "DRV_I2C_7BIT_SLAVE">
    /* The I2C module shifts left internally, so shifting right to account for that */ 
    PLIB_I2C_SlaveAddress7BitSet(${I2C_INSTANCE}, ${SLAVE_ADDRESS}>>1);
    PLIB_I2C_SlaveMask7BitSet(${I2C_INSTANCE}, ${ADDRESS_MASK});
<#else>
    PLIB_I2C_SlaveAddress10BitSet(${I2C_INSTANCE}, ${SLAVE_ADDRESS});
    PLIB_I2C_SlaveMask10BitSet(${I2C_INSTANCE}, ${SLAVE_ADDRESS});
</#if>
<#if GENERAL_ADDRESS == true>
    PLIB_I2C_GeneralCallEnable(${I2C_INSTANCE});
<#else>
    PLIB_I2C_GeneralCallDisable(${I2C_INSTANCE});
</#if>
<#if STRICT_ADDRESS_RULE == true>
    PLIB_I2C_ReservedAddressProtectEnable(${I2C_INSTANCE});
<#else>
    PLIB_I2C_ReservedAddressProtectDisable(${I2C_INSTANCE});
</#if>
<#if CLOCK_STRETCH == true>
    PLIB_I2C_SlaveClockStretchingEnable(${I2C_INSTANCE});
<#else>
    PLIB_I2C_SlaveClockStretchingEnable(${I2C_INSTANCE});
</#if>	
</#if>

<#if CONFIG_DRV_I2C_INTERRUPT_MODE == true>
<#if CONFIG_PIC32MX == true>
    /* Initialize interrupts */
<#if MODE == "DRV_I2C_MODE_MASTER">
    PLIB_INT_SourceFlagClear(INT_ID_0, ${MASTER_INT_SRC});
    PLIB_INT_SourceEnable(INT_ID_0, ${MASTER_INT_SRC});
<#else>
    PLIB_INT_SourceFlagClear(INT_ID_0, ${SLAVE_INT_SRC});
    PLIB_INT_SourceEnable(INT_ID_0, ${SLAVE_INT_SRC});
</#if>
    PLIB_INT_SourceFlagClear(INT_ID_0, ${ERR_INT_SRC});
    PLIB_INT_SourceEnable(INT_ID_0, ${ERR_INT_SRC});
    PLIB_INT_VectorPrioritySet(INT_ID_0, ${INT_VECTOR}, ${INT_PRIORITY});
    PLIB_INT_VectorSubPrioritySet(INT_ID_0, ${INT_VECTOR}, ${INT_SUB_PRIORITY});
</#if>

<#if CONFIG_PIC32MZ == true || CONFIG_PIC32WK == true || CONFIG_PIC32MK == true>
<#if MODE == "DRV_I2C_MODE_MASTER">
    /* Initialize master interrupt */
    PLIB_INT_SourceFlagClear(INT_ID_0, ${MASTER_INT_SRC});
    PLIB_INT_SourceEnable(INT_ID_0, ${MASTER_INT_SRC});
    PLIB_INT_VectorPrioritySet(INT_ID_0, ${MASTER_INT_VECTOR}, ${MASTER_INT_PRIORITY});
    PLIB_INT_VectorSubPrioritySet(INT_ID_0, ${MASTER_INT_VECTOR}, ${MASTER_INT_SUB_PRIORITY});
<#else>
    /* Initialize slave interrupt */
    PLIB_INT_SourceFlagClear(INT_ID_0, ${SLAVE_INT_SRC});
    PLIB_INT_SourceEnable(INT_ID_0, ${SLAVE_INT_SRC});
    PLIB_INT_VectorPrioritySet(INT_ID_0, ${SLAVE_INT_VECTOR}, ${SLAVE_INT_PRIORITY});
    PLIB_INT_VectorSubPrioritySet(INT_ID_0, ${SLAVE_INT_VECTOR}, ${SLAVE_INT_SUB_PRIORITY});
</#if>

    /* Initialize fault interrupt */
    PLIB_INT_SourceFlagClear(INT_ID_0, ${ERR_INT_SRC});
    PLIB_INT_SourceEnable(INT_ID_0, ${ERR_INT_SRC});
    PLIB_INT_VectorPrioritySet(INT_ID_0, ${ERR_INT_VECTOR}, ${ERR_INT_PRIORITY});
    PLIB_INT_VectorSubPrioritySet(INT_ID_0, ${ERR_INT_VECTOR}, ${ERR_INT_SUB_PRIORITY});
	
</#if>
</#if>
<#if CONFIG_DEVICE?contains("EC")>
<#if MODE == "DRV_I2C_MODE_MASTER" && CONFIG_PIC32MZ == true || CONFIG_PIC32MK == true>
<#if I2C_INSTANCE == "I2C_ID_1">
<#if CONFIG_DEVICE == "PIC32MZ0512ECE064" || CONFIG_DEVICE == "PIC32MZ0512ECF064" || CONFIG_DEVICE == "PIC32MZ0512ECK064" 
|| CONFIG_DEVICE == "PIC32MZ1024ECG064" || CONFIG_DEVICE == "PIC32MZ1024ECH064" || CONFIG_DEVICE == "PIC32MZ1024ECM064" 
|| CONFIG_DEVICE == "PIC32MZ2048ECG064" || CONFIG_DEVICE == "PIC32MZ2048ECH064" || CONFIG_DEVICE == "PIC32MZ2048ECM064" 
|| CONFIG_DEVICE == "PIC32MZ1024ECE064" || CONFIG_DEVICE == "PIC32MZ1024ECF064" || CONFIG_DEVICE == "PIC32MZ1024ECK064" >
              /* set SDA to 0 */
    PLIB_PORTS_PinClear(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_9);
              /* set SCL to 1 */
    PLIB_PORTS_PinSet(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_10);
              /* set SDA to O/P */
    PLIB_PORTS_PinDirectionOutputSet(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_9);
              /* set SCL to I/P */
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_10);
<#else>
              /* set SDA to 0 */
    PLIB_PORTS_PinClear(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_15);
              /* set SCL to 1 */
    PLIB_PORTS_PinSet(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_14);
              /* set SDA to O/P */
    PLIB_PORTS_PinDirectionOutputSet(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_15);
              /* set SCL to I/P */
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_14);
</#if>
</#if>
<#if I2C_INSTANCE == "I2C_ID_2">
    PLIB_PORTS_PinClear(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_3);
    PLIB_PORTS_PinSet(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_2);
    PLIB_PORTS_PinDirectionOutputSet(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_3);
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_2);
</#if>
<#if I2C_INSTANCE == "I2C_ID_3">
<#if CONFIG_DEVICE == "PIC32MZ0512ECE064" || CONFIG_DEVICE == "PIC32MZ0512ECF064" || CONFIG_DEVICE == "PIC32MZ0512ECK064" 
|| CONFIG_DEVICE == "PIC32MZ1024ECG064" || CONFIG_DEVICE == "PIC32MZ1024ECH064" || CONFIG_DEVICE == "PIC32MZ1024ECM064" 
|| CONFIG_DEVICE == "PIC32MZ2048ECG064" || CONFIG_DEVICE == "PIC32MZ2048ECH064" || CONFIG_DEVICE == "PIC32MZ2048ECM064" 
|| CONFIG_DEVICE == "PIC32MZ1024ECE064" || CONFIG_DEVICE == "PIC32MZ1024ECF064" || CONFIG_DEVICE == "PIC32MZ1024ECK064" >
              /* set SDA to 0 */
    PLIB_PORTS_PinClear(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_2);
              /* set SCL to 1 */
    PLIB_PORTS_PinSet(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_3);
              /* set SDA to O/P */
    PLIB_PORTS_PinDirectionOutputSet(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_2);
              /* set SCL to I/P */
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_10);
<#else>
              /* set SDA to 0 */
    PLIB_PORTS_PinClear(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_2);
              /* set SCL to 1 */
    PLIB_PORTS_PinSet(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_8);
              /* set SDA to O/P */
    PLIB_PORTS_PinDirectionOutputSet(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_2);
              /* set SCL to I/P */
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_8);
</#if>
</#if>
<#if I2C_INSTANCE == "I2C_ID_4">
              /* set SDA to 0 */
    PLIB_PORTS_PinClear(PORTS_ID_0, PORT_CHANNEL_G, PORTS_BIT_POS_7);
              /* set SCL to 1 */
    PLIB_PORTS_PinSet(PORTS_ID_0, PORT_CHANNEL_G, PORTS_BIT_POS_8);
              /* set SDA to O/P */
    PLIB_PORTS_PinDirectionOutputSet(PORTS_ID_0, PORT_CHANNEL_G, PORTS_BIT_POS_7);
              /* set SCL to I/P */
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_G, PORTS_BIT_POS_8);
</#if>
<#if I2C_INSTANCE == "I2C_ID_5">
              /* set SDA to 0 */
    PLIB_PORTS_PinClear(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_4);
              /* set SCL to 1 */
    PLIB_PORTS_PinSet(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_5);
              /* set SDA to O/P */
    PLIB_PORTS_PinDirectionOutputSet(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_4);
              /* set SCL to I/P */
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_5);
</#if>
</#if>
</#if>
    /* Enable I2C${DRV_INSTANCE} */
    PLIB_I2C_Enable(${I2C_INSTANCE});
}

void DRV_I2C${DRV_INSTANCE}_DeInitialize(void)
{
    /* Disable I2C${DRV_INSTANCE} */
    PLIB_I2C_Disable(${I2C_INSTANCE});
}

// *****************************************************************************
// Section: Instance ${DRV_INSTANCE} Byte Transfer Functions (Master/Slave)
// *****************************************************************************
bool DRV_I2C${DRV_INSTANCE}_SetUpByteRead(void)
{
    /* Check for receive overflow */
    if ( PLIB_I2C_ReceiverOverflowHasOccurred(${I2C_INSTANCE}))  
    {
        PLIB_I2C_ReceiverOverflowClear(${I2C_INSTANCE}); 
        return false;
    }
	
<#if MODE == "DRV_I2C_MODE_SLAVE">
    /* Release clock */
    PLIB_I2C_SlaveClockRelease(${I2C_INSTANCE});
	return true;
<#else>
    /* Initiate clock to receive */
    PLIB_I2C_MasterReceiverClock1Byte(${I2C_INSTANCE});
    return true;
</#if>
}

bool DRV_I2C${DRV_INSTANCE}_WaitForReadByteAvailable(void)
{
	/* Wait for Receive Buffer Full */
    if(PLIB_I2C_ReceivedByteIsAvailable(${I2C_INSTANCE}))
       return true;

	return false;
}

uint8_t DRV_I2C${DRV_INSTANCE}_ByteRead(void)
{	
    /* Return received value */
    return (PLIB_I2C_ReceivedByteGet(${I2C_INSTANCE}));
}

bool DRV_I2C${DRV_INSTANCE}_ByteWrite(const uint8_t byte)
{
        
    /* if no IWCOL errors exist, then transmit byte */
	if ( (!(PLIB_I2C_TransmitterIsBusy(${I2C_INSTANCE}))) &&
		(PLIB_I2C_TransmitterByteHasCompleted(${I2C_INSTANCE})) )
    {
		PLIB_I2C_TransmitterByteSend(${I2C_INSTANCE}, byte);
	}
	
	/* check if writing to I2CxTRN caused a transmitter overflow */
	if (PLIB_I2C_TransmitterOverflowHasOccurred(${I2C_INSTANCE}))
	    return false;
    
<#if MODE == "DRV_I2C_MODE_SLAVE">        
        PLIB_I2C_SlaveClockRelease(${I2C_INSTANCE});
</#if>

    return true;
}

bool DRV_I2C${DRV_INSTANCE}_WaitForByteWriteToComplete(void)
{
    /* if TBF == 0 and TRSTAT == 0 then write complete */ 
	
	if ( (!(PLIB_I2C_TransmitterIsBusy(${I2C_INSTANCE}))) &&
		(PLIB_I2C_TransmitterByteHasCompleted(${I2C_INSTANCE})) )
		return true;
	
    return false;
}

bool DRV_I2C${DRV_INSTANCE}_WriteByteAcknowledged(void)
{
    /* Check to see if transmit ACKed = true or NACKed = false */
    if (PLIB_I2C_TransmitterByteWasAcknowledged(${I2C_INSTANCE}))
       return true;

    return false;
}

<#if MODE == "DRV_I2C_MODE_MASTER">
// *****************************************************************************
// Section: Instance ${DRV_INSTANCE} I2C Master Mode Functions
// *****************************************************************************
void DRV_I2C${DRV_INSTANCE}_BaudRateSet(I2C_BAUD_RATE baudRate)
{
    /* Disable I2C${DRV_INSTANCE} */
    PLIB_I2C_Disable(${I2C_INSTANCE});
    
    /* Change baud rate */
<#if CONFIG_PIC32MX == true>
    PLIB_I2C_BaudRateSet(${I2C_INSTANCE}, SYS_CLK_PeripheralFrequencyGet(CLK_BUS_PERIPHERAL_1), baudRate);
<#else>
    PLIB_I2C_BaudRateSet(${I2C_INSTANCE}, SYS_CLK_PeripheralFrequencyGet(CLK_BUS_PERIPHERAL_2), baudRate);
</#if>
<#if SLEW_RATE == true>

    /* High frequency is enabled (**NOTE** PLIB function inverted) */
    PLIB_I2C_HighFrequencyDisable(${I2C_INSTANCE});
<#else>

    /* Low frequency is enabled (**NOTE** PLIB function inverted) */
    PLIB_I2C_HighFrequencyEnable(${I2C_INSTANCE});
</#if>
 
    /* Enable I2C${DRV_INSTANCE} */
    PLIB_I2C_Enable(${I2C_INSTANCE});       
}

bool DRV_I2C${DRV_INSTANCE}_MasterBusIdle(void)
{
    if (PLIB_I2C_BusIsIdle(${I2C_INSTANCE}))
       return true;
    else
       return false;
}

bool DRV_I2C${DRV_INSTANCE}_MasterStart(void)
{
    /* if bus is not idle return with false */
	if (!(PLIB_I2C_BusIsIdle(${I2C_INSTANCE})))
	   return false;

    /* return false is Bus Collision exisits */
    if (PLIB_I2C_ArbitrationLossHasOccurred(${I2C_INSTANCE}))
    {
        return false;
    }
    
    /* Issue start */
    PLIB_I2C_MasterStart(${I2C_INSTANCE});
       
    return true;
}

bool DRV_I2C${DRV_INSTANCE}_WaitForStartComplete(void)
{
    /* Wait for start/restart sequence to finish  (hardware clear) */
	
	if ( (PLIB_I2C_BusIsIdle(${I2C_INSTANCE})) &&
         (PLIB_I2C_StartWasDetected(${I2C_INSTANCE})) )
	    return true;
	
	return false;
}

bool DRV_I2C${DRV_INSTANCE}_MasterRestart(void)
{
    /* if bus is not idle return with false */
	if (!(PLIB_I2C_BusIsIdle(${I2C_INSTANCE})))
	   return false;

    /* return false is Bus Collision exisits */
    if (PLIB_I2C_ArbitrationLossHasOccurred(${I2C_INSTANCE}))
    {
        return false;
    }
    
    /* Issue restart */
    PLIB_I2C_MasterStartRepeat(${I2C_INSTANCE}); 
       
    return true;    
}

bool DRV_I2C${DRV_INSTANCE}_MasterStop(void)
{   
<#if CONFIG_PIC32MZ == true && CONFIG_DEVICE?contains("EC")>
    uint32_t starttime;
</#if>
    
<#if CONFIG_PIC32MX == true || CONFIG_DEVICE?contains("EF") || CONFIG_DEVICE?contains("DA") || CONFIG_PIC32WK == true >
    /* if bus is not idle return with false */
	if (!(PLIB_I2C_BusIsIdle(${I2C_INSTANCE})))
	   return false;

    /* Issue stop */
    PLIB_I2C_MasterStop(${I2C_INSTANCE});
</#if>

<#if CONFIG_PIC32MZ == true && CONFIG_DEVICE?contains("EC")>
    /* Wait 1 BRG */
    starttime = ReadCoreTimer();
    while(ReadCoreTimer()-starttime < BRG_1_TIME_${DRV_INSTANCE});

    /* Disable I2C */
    PLIB_I2C_Disable(${I2C_INSTANCE});

    /* Wait 2 BRG */
    starttime = ReadCoreTimer();
    while(ReadCoreTimer()- starttime < BRG_1_TIME_${DRV_INSTANCE});

    /* Set SDA as I/P */
<#if I2C_INSTANCE == "I2C_ID_1">
<#if CONFIG_DEVICE == "PIC32MZ0512ECE064" || CONFIG_DEVICE == "PIC32MZ0512ECF064" || CONFIG_DEVICE == "PIC32MZ0512ECK064" 
|| CONFIG_DEVICE == "PIC32MZ1024ECG064" || CONFIG_DEVICE == "PIC32MZ1024ECH064" || CONFIG_DEVICE == "PIC32MZ1024ECM064" 
|| CONFIG_DEVICE == "PIC32MZ2048ECG064" || CONFIG_DEVICE == "PIC32MZ2048ECH064" || CONFIG_DEVICE == "PIC32MZ2048ECM064" 
|| CONFIG_DEVICE == "PIC32MZ1024ECE064" || CONFIG_DEVICE == "PIC32MZ1024ECF064" || CONFIG_DEVICE == "PIC32MZ1024ECK064" >
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_9);
<#else>
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_15);
</#if>
</#if>
<#if I2C_INSTANCE == "I2C_ID_2">
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_3);
</#if>
<#if I2C_INSTANCE == "I2C_ID_3">
<#if CONFIG_DEVICE == "PIC32MZ0512ECE064" || CONFIG_DEVICE == "PIC32MZ0512ECF064" || CONFIG_DEVICE == "PIC32MZ0512ECK064" 
|| CONFIG_DEVICE == "PIC32MZ1024ECG064" || CONFIG_DEVICE == "PIC32MZ1024ECH064" || CONFIG_DEVICE == "PIC32MZ1024ECM064" 
|| CONFIG_DEVICE == "PIC32MZ2048ECG064" || CONFIG_DEVICE == "PIC32MZ2048ECH064" || CONFIG_DEVICE == "PIC32MZ2048ECM064" 
|| CONFIG_DEVICE == "PIC32MZ1024ECE064" || CONFIG_DEVICE == "PIC32MZ1024ECF064" || CONFIG_DEVICE == "PIC32MZ1024ECK064" >
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_2);
<#else>
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_2);
</#if>
</#if>
<#if I2C_INSTANCE == "I2C_ID_4">
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_G, PORTS_BIT_POS_7);
</#if>
<#if I2C_INSTANCE == "I2C_ID_5">
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_4);
</#if>
    /* Wait 3 BRG */
    starttime = ReadCoreTimer();
    while(ReadCoreTimer()- starttime < BRG_1_TIME_${DRV_INSTANCE});
	
    PLIB_I2C_Enable(${I2C_INSTANCE});
<#if I2C_INSTANCE == "I2C_ID_1">
<#if CONFIG_DEVICE == "PIC32MZ0512ECE064" || CONFIG_DEVICE == "PIC32MZ0512ECF064" || CONFIG_DEVICE == "PIC32MZ0512ECK064" 
|| CONFIG_DEVICE == "PIC32MZ1024ECG064" || CONFIG_DEVICE == "PIC32MZ1024ECH064" || CONFIG_DEVICE == "PIC32MZ1024ECM064" 
|| CONFIG_DEVICE == "PIC32MZ2048ECG064" || CONFIG_DEVICE == "PIC32MZ2048ECH064" || CONFIG_DEVICE == "PIC32MZ2048ECM064" 
|| CONFIG_DEVICE == "PIC32MZ1024ECE064" || CONFIG_DEVICE == "PIC32MZ1024ECF064" || CONFIG_DEVICE == "PIC32MZ1024ECK064" >
              /* set SDA to 0 */
    PLIB_PORTS_PinClear(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_9);
              /* set SCL to 1 */
    PLIB_PORTS_PinSet(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_10);
              /* set SDA to O/P */
    PLIB_PORTS_PinDirectionOutputSet(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_9);
              /* set SCL to I/P */
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_10);
<#else>
              /* set SDA to 0 */
    PLIB_PORTS_PinClear(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_15);
              /* set SCL to 1 */
    PLIB_PORTS_PinSet(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_14);
              /* set SDA to O/P */
    PLIB_PORTS_PinDirectionOutputSet(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_15);
              /* set SCL to I/P */
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_14);
</#if>
</#if>
<#if I2C_INSTANCE == "I2C_ID_2">
    PLIB_PORTS_PinClear(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_3);
    PLIB_PORTS_PinSet(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_2);
    PLIB_PORTS_PinDirectionOutputSet(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_3);
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_A, PORTS_BIT_POS_2);
</#if>
<#if I2C_INSTANCE == "I2C_ID_3">
<#if CONFIG_DEVICE == "PIC32MZ0512ECE064" || CONFIG_DEVICE == "PIC32MZ0512ECF064" || CONFIG_DEVICE == "PIC32MZ0512ECK064" 
|| CONFIG_DEVICE == "PIC32MZ1024ECG064" || CONFIG_DEVICE == "PIC32MZ1024ECH064" || CONFIG_DEVICE == "PIC32MZ1024ECM064" 
|| CONFIG_DEVICE == "PIC32MZ2048ECG064" || CONFIG_DEVICE == "PIC32MZ2048ECH064" || CONFIG_DEVICE == "PIC32MZ2048ECM064" 
|| CONFIG_DEVICE == "PIC32MZ1024ECE064" || CONFIG_DEVICE == "PIC32MZ1024ECF064" || CONFIG_DEVICE == "PIC32MZ1024ECK064" >
              /* set SDA to 0 */
    PLIB_PORTS_PinClear(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_2);
              /* set SCL to 1 */
    PLIB_PORTS_PinSet(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_3);
              /* set SDA to O/P */
    PLIB_PORTS_PinDirectionOutputSet(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_2);
              /* set SCL to I/P */
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_D, PORTS_BIT_POS_10);
<#else>
              /* set SDA to 0 */
    PLIB_PORTS_PinClear(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_2);
              /* set SCL to 1 */
    PLIB_PORTS_PinSet(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_8);
              /* set SDA to O/P */
    PLIB_PORTS_PinDirectionOutputSet(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_2);
              /* set SCL to I/P */
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_8);
</#if>
</#if>
<#if I2C_INSTANCE == "I2C_ID_4">
              /* set SDA to 0 */
    PLIB_PORTS_PinClear(PORTS_ID_0, PORT_CHANNEL_G, PORTS_BIT_POS_7);
              /* set SCL to 1 */
    PLIB_PORTS_PinSet(PORTS_ID_0, PORT_CHANNEL_G, PORTS_BIT_POS_8);
              /* set SDA to O/P */
    PLIB_PORTS_PinDirectionOutputSet(PORTS_ID_0, PORT_CHANNEL_G, PORTS_BIT_POS_7);
              /* set SCL to I/P */
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_G, PORTS_BIT_POS_8);
</#if>
<#if I2C_INSTANCE == "I2C_ID_5">
              /* set SDA to 0 */
    PLIB_PORTS_PinClear(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_4);
              /* set SCL to 1 */
    PLIB_PORTS_PinSet(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_5);
              /* set SDA to O/P */
    PLIB_PORTS_PinDirectionOutputSet(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_4);
              /* set SCL to I/P */
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_F, PORTS_BIT_POS_5);
</#if>
</#if>	
    
     return true;
}

bool DRV_I2C${DRV_INSTANCE}_WaitForStopComplete(void)
{
    <#if CONFIG_PIC32MZ == true && CONFIG_DEVICE?contains("EC")>
	return true;
	<#else>
    if ( (PLIB_I2C_BusIsIdle(${I2C_INSTANCE})) && 
	    (PLIB_I2C_StopWasDetected(${I2C_INSTANCE}))	)	
        return true;
		  
		return false;  
	</#if>
}

void DRV_I2C${DRV_INSTANCE}_MasterACKSend(void)
{
    /* Check if receive is ready to ack */
    if ( PLIB_I2C_MasterReceiverReadyToAcknowledge(${I2C_INSTANCE}) )
    {
        PLIB_I2C_ReceivedByteAcknowledge (${I2C_INSTANCE}, true);
    }    

}

void DRV_I2C${DRV_INSTANCE}_MasterNACKSend(void)
{
    /* Check if receive is ready to nack */
    if ( PLIB_I2C_MasterReceiverReadyToAcknowledge(${I2C_INSTANCE}) )
    {
       PLIB_I2C_ReceivedByteAcknowledge (${I2C_INSTANCE}, false);
    }    
}

bool DRV_I2C${DRV_INSTANCE}_WaitForACKOrNACKComplete(void)
{
    /* Check for ACK/NACK to complete */
    if(PLIB_I2C_ReceiverByteAcknowledgeHasCompleted(${I2C_INSTANCE}))
		return true;
	
	return false;
}

</#if>

</#macro>
<#if CONFIG_DRV_I2C_INST_IDX0 == true && CONFIG_PIC32MX == true>
<@DRV_I2C_STATIC_FUNCTIONS DRV_INSTANCE="0"
I2C_INSTANCE=CONFIG_DRV_I2C_PERIPHERAL_ID_IDX0
MODE=CONFIG_DRV_I2C_STATIC_OPERATION_MODE_IDX0
SLEW_RATE=CONFIG_DRV_I2C_STATIC_SLEW_RATE_CONTROL_IDX0
BRG_CLOCK=CONFIG_DRV_I2C_STATIC_BRG_CLOCK_IDX0
BAUD=CONFIG_DRV_I2C_STATIC_BAUD_RATE_IDX0
SMBus_SPEC=CONFIG_DRV_I2C_STATIC_SMBus_SPECIFICATION_IDX0
ADDRESS_WIDTH=CONFIG_DRV_I2C_STATIC_ADDRESS_WIDTH_IDX0
STRICT_ADDRESS_RULE=CONFIG_DRV_I2C_STATIC_STRICT_ADDRESS_RULE_IDX0
GENERAL_ADDRESS=CONFIG_DRV_I2C_STATIC_GENERAL_CALL_ADDRESS_IDX0
CLOCK_STRETCH=CONFIG_DRV_I2C_STATIC_CLOCK_STRETCH_IDX0
ADDRESS_MASK=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_MASK_IDX0
SLAVE_ADDRESS=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_VALUE_IDX0
MASTER_INT_SRC=CONFIG_DRV_I2C_MASTER_INT_SRC_IDX0
SLAVE_INT_SRC=CONFIG_DRV_I2C_SLAVE_INT_SRC_IDX0
ERR_INT_SRC = CONFIG_DRV_I2C_ERR_MX_INT_SRC_IDX0
INT_VECTOR=CONFIG_DRV_I2C_INT_VECTOR_IDX0
ISR_VECTOR=CONFIG_DRV_I2C_ISR_VECTOR_IDX0
INT_PRIORITY=CONFIG_DRV_I2C_INT_PRIORITY_IDX0
INT_SUB_PRIORITY=CONFIG_DRV_I2C_INT_SUB_PRIORITY_IDX0
MASTER_INT_VECTOR=CONFIG_DRV_I2C_MASTER_INT_VECTOR_IDX0
MASTER_ISR_VECTOR=CONFIG_DRV_I2C_MASTER_ISR_VECTOR_IDX0
MASTER_INT_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_PRIORITY_IDX0
MASTER_INT_SUB_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_SUB_PRIORITY_IDX0
SLAVE_INT_VECTOR=CONFIG_DRV_I2C_SLAVE_INT_VECTOR_IDX0
SLAVE_ISR_VECTOR=CONFIG_DRV_I2C_SLAVE_ISR_VECTOR_IDX0
SLAVE_INT_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_PRIORITY_IDX0
SLAVE_INT_SUB_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_SUB_PRIORITY_IDX0
ERR_INT_VECTOR=CONFIG_DRV_I2C_ERR_INT_VECTOR_IDX0
ERR_INT_PRIORITY=CONFIG_DRV_I2C_ERR_INT_PRIORITY_IDX0
ERR_INT_SUB_PRIORITY=CONFIG_DRV_I2C_ERR_INT_SUB_PRIORITY_IDX0
PWR_MODE=CONFIG_DRV_I2C_POWER_STATE_IDX0/>
</#if>
<#if CONFIG_DRV_I2C_INST_IDX0 == true && (CONFIG_PIC32MZ == true || CONFIG_PIC32WK == true || CONFIG_PIC32MK == true)>
<@DRV_I2C_STATIC_FUNCTIONS DRV_INSTANCE="0"
I2C_INSTANCE=CONFIG_DRV_I2C_PERIPHERAL_ID_IDX0
MODE=CONFIG_DRV_I2C_STATIC_OPERATION_MODE_IDX0
SLEW_RATE=CONFIG_DRV_I2C_STATIC_SLEW_RATE_CONTROL_IDX0
BRG_CLOCK=CONFIG_DRV_I2C_STATIC_BRG_CLOCK_IDX0
BAUD=CONFIG_DRV_I2C_STATIC_BAUD_RATE_IDX0
SMBus_SPEC=CONFIG_DRV_I2C_STATIC_SMBus_SPECIFICATION_IDX0
ADDRESS_WIDTH=CONFIG_DRV_I2C_STATIC_ADDRESS_WIDTH_IDX0
STRICT_ADDRESS_RULE=CONFIG_DRV_I2C_STATIC_STRICT_ADDRESS_RULE_IDX0
GENERAL_ADDRESS=CONFIG_DRV_I2C_STATIC_GENERAL_CALL_ADDRESS_IDX0
CLOCK_STRETCH=CONFIG_DRV_I2C_STATIC_CLOCK_STRETCH_IDX0
ADDRESS_MASK=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_MASK_IDX0
SLAVE_ADDRESS=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_VALUE_IDX0
MASTER_INT_SRC=CONFIG_DRV_I2C_MASTER_INT_SRC_IDX0
SLAVE_INT_SRC=CONFIG_DRV_I2C_SLAVE_INT_SRC_IDX0
ERR_INT_SRC = CONFIG_DRV_I2C_ERR_MZ_INT_SRC_IDX0
INT_VECTOR=CONFIG_DRV_I2C_INT_VECTOR_IDX0
ISR_VECTOR=CONFIG_DRV_I2C_ISR_VECTOR_IDX0
INT_PRIORITY=CONFIG_DRV_I2C_INT_PRIORITY_IDX0
INT_SUB_PRIORITY=CONFIG_DRV_I2C_INT_SUB_PRIORITY_IDX0
MASTER_INT_VECTOR=CONFIG_DRV_I2C_MASTER_INT_VECTOR_IDX0
MASTER_ISR_VECTOR=CONFIG_DRV_I2C_MASTER_ISR_VECTOR_IDX0
MASTER_INT_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_PRIORITY_IDX0
MASTER_INT_SUB_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_SUB_PRIORITY_IDX0
SLAVE_INT_VECTOR=CONFIG_DRV_I2C_SLAVE_INT_VECTOR_IDX0
SLAVE_ISR_VECTOR=CONFIG_DRV_I2C_SLAVE_ISR_VECTOR_IDX0
SLAVE_INT_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_PRIORITY_IDX0
SLAVE_INT_SUB_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_SUB_PRIORITY_IDX0
ERR_INT_VECTOR=CONFIG_DRV_I2C_ERR_INT_VECTOR_IDX0
ERR_INT_PRIORITY=CONFIG_DRV_I2C_ERR_INT_PRIORITY_IDX0
ERR_INT_SUB_PRIORITY=CONFIG_DRV_I2C_ERR_INT_SUB_PRIORITY_IDX0
PWR_MODE=CONFIG_DRV_I2C_POWER_STATE_IDX0/>
</#if>
<#if CONFIG_DRV_I2C_INST_IDX1 == true && CONFIG_PIC32MX == true>
<@DRV_I2C_STATIC_FUNCTIONS DRV_INSTANCE="1"
I2C_INSTANCE=CONFIG_DRV_I2C_PERIPHERAL_ID_IDX1
MODE=CONFIG_DRV_I2C_STATIC_OPERATION_MODE_IDX1
SLEW_RATE=CONFIG_DRV_I2C_STATIC_SLEW_RATE_CONTROL_IDX1
BRG_CLOCK=CONFIG_DRV_I2C_STATIC_BRG_CLOCK_IDX1
BAUD=CONFIG_DRV_I2C_STATIC_BAUD_RATE_IDX1
SMBus_SPEC=CONFIG_DRV_I2C_STATIC_SMBus_SPECIFICATION_IDX1
ADDRESS_WIDTH=CONFIG_DRV_I2C_STATIC_ADDRESS_WIDTH_IDX1
STRICT_ADDRESS_RULE=CONFIG_DRV_I2C_STATIC_STRICT_ADDRESS_RULE_IDX1
GENERAL_ADDRESS=CONFIG_DRV_I2C_STATIC_GENERAL_CALL_ADDRESS_IDX1
CLOCK_STRETCH=CONFIG_DRV_I2C_STATIC_CLOCK_STRETCH_IDX1
ADDRESS_MASK=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_MASK_IDX1
SLAVE_ADDRESS=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_VALUE_IDX1
MASTER_INT_SRC=CONFIG_DRV_I2C_MASTER_INT_SRC_IDX1
SLAVE_INT_SRC=CONFIG_DRV_I2C_SLAVE_INT_SRC_IDX1
ERR_INT_SRC = CONFIG_DRV_I2C_ERR_MX_INT_SRC_IDX1
INT_VECTOR=CONFIG_DRV_I2C_INT_VECTOR_IDX1
ISR_VECTOR=CONFIG_DRV_I2C_ISR_VECTOR_IDX1
INT_PRIORITY=CONFIG_DRV_I2C_INT_PRIORITY_IDX1
INT_SUB_PRIORITY=CONFIG_DRV_I2C_INT_SUB_PRIORITY_IDX1
MASTER_INT_VECTOR=CONFIG_DRV_I2C_MASTER_INT_VECTOR_IDX1
MASTER_ISR_VECTOR=CONFIG_DRV_I2C_MASTER_ISR_VECTOR_IDX1
MASTER_INT_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_PRIORITY_IDX1
MASTER_INT_SUB_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_SUB_PRIORITY_IDX1
SLAVE_INT_VECTOR=CONFIG_DRV_I2C_SLAVE_INT_VECTOR_IDX1
SLAVE_ISR_VECTOR=CONFIG_DRV_I2C_SLAVE_ISR_VECTOR_IDX1
SLAVE_INT_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_PRIORITY_IDX1
SLAVE_INT_SUB_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_SUB_PRIORITY_IDX1
ERR_INT_VECTOR=CONFIG_DRV_I2C_ERR_INT_VECTOR_IDX1
ERR_INT_PRIORITY=CONFIG_DRV_I2C_ERR_INT_PRIORITY_IDX1
ERR_INT_SUB_PRIORITY=CONFIG_DRV_I2C_ERR_INT_SUB_PRIORITY_IDX1
PWR_MODE=CONFIG_DRV_I2C_POWER_STATE_IDX1/>
</#if>
<#if CONFIG_DRV_I2C_INST_IDX1 == true && (CONFIG_PIC32MZ == true || CONFIG_PIC32WK == true || CONFIG_PIC32MK == true)>
<@DRV_I2C_STATIC_FUNCTIONS DRV_INSTANCE="1"
I2C_INSTANCE=CONFIG_DRV_I2C_PERIPHERAL_ID_IDX1
MODE=CONFIG_DRV_I2C_STATIC_OPERATION_MODE_IDX1
SLEW_RATE=CONFIG_DRV_I2C_STATIC_SLEW_RATE_CONTROL_IDX1
BRG_CLOCK=CONFIG_DRV_I2C_STATIC_BRG_CLOCK_IDX1
BAUD=CONFIG_DRV_I2C_STATIC_BAUD_RATE_IDX1
SMBus_SPEC=CONFIG_DRV_I2C_STATIC_SMBus_SPECIFICATION_IDX1
ADDRESS_WIDTH=CONFIG_DRV_I2C_STATIC_ADDRESS_WIDTH_IDX1
STRICT_ADDRESS_RULE=CONFIG_DRV_I2C_STATIC_STRICT_ADDRESS_RULE_IDX1
GENERAL_ADDRESS=CONFIG_DRV_I2C_STATIC_GENERAL_CALL_ADDRESS_IDX1
CLOCK_STRETCH=CONFIG_DRV_I2C_STATIC_CLOCK_STRETCH_IDX1
ADDRESS_MASK=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_MASK_IDX1
SLAVE_ADDRESS=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_VALUE_IDX1
MASTER_INT_SRC=CONFIG_DRV_I2C_MASTER_INT_SRC_IDX1
SLAVE_INT_SRC=CONFIG_DRV_I2C_SLAVE_INT_SRC_IDX1
ERR_INT_SRC = CONFIG_DRV_I2C_ERR_MZ_INT_SRC_IDX1
INT_VECTOR=CONFIG_DRV_I2C_INT_VECTOR_IDX1
ISR_VECTOR=CONFIG_DRV_I2C_ISR_VECTOR_IDX1
INT_PRIORITY=CONFIG_DRV_I2C_INT_PRIORITY_IDX1
INT_SUB_PRIORITY=CONFIG_DRV_I2C_INT_SUB_PRIORITY_IDX1
MASTER_INT_VECTOR=CONFIG_DRV_I2C_MASTER_INT_VECTOR_IDX1
MASTER_ISR_VECTOR=CONFIG_DRV_I2C_MASTER_ISR_VECTOR_IDX1
MASTER_INT_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_PRIORITY_IDX1
MASTER_INT_SUB_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_SUB_PRIORITY_IDX1
SLAVE_INT_VECTOR=CONFIG_DRV_I2C_SLAVE_INT_VECTOR_IDX1
SLAVE_ISR_VECTOR=CONFIG_DRV_I2C_SLAVE_ISR_VECTOR_IDX1
SLAVE_INT_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_PRIORITY_IDX1
SLAVE_INT_SUB_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_SUB_PRIORITY_IDX1
ERR_INT_VECTOR=CONFIG_DRV_I2C_ERR_INT_VECTOR_IDX1
ERR_INT_PRIORITY=CONFIG_DRV_I2C_ERR_INT_PRIORITY_IDX1
ERR_INT_SUB_PRIORITY=CONFIG_DRV_I2C_ERR_INT_SUB_PRIORITY_IDX1
PWR_MODE=CONFIG_DRV_I2C_POWER_STATE_IDX1/>
</#if>
<#if CONFIG_DRV_I2C_INST_IDX2 == true && CONFIG_PIC32MX == true>
<@DRV_I2C_STATIC_FUNCTIONS DRV_INSTANCE="2"
I2C_INSTANCE=CONFIG_DRV_I2C_PERIPHERAL_ID_IDX2
MODE=CONFIG_DRV_I2C_STATIC_OPERATION_MODE_IDX2
SLEW_RATE=CONFIG_DRV_I2C_STATIC_SLEW_RATE_CONTROL_IDX2
BRG_CLOCK=CONFIG_DRV_I2C_STATIC_BRG_CLOCK_IDX2
BAUD=CONFIG_DRV_I2C_STATIC_BAUD_RATE_IDX2
SMBus_SPEC=CONFIG_DRV_I2C_STATIC_SMBus_SPECIFICATION_IDX2
ADDRESS_WIDTH=CONFIG_DRV_I2C_STATIC_ADDRESS_WIDTH_IDX2
STRICT_ADDRESS_RULE=CONFIG_DRV_I2C_STATIC_STRICT_ADDRESS_RULE_IDX2
GENERAL_ADDRESS=CONFIG_DRV_I2C_STATIC_GENERAL_CALL_ADDRESS_IDX2
CLOCK_STRETCH=CONFIG_DRV_I2C_STATIC_CLOCK_STRETCH_IDX2
ADDRESS_MASK=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_MASK_IDX2
SLAVE_ADDRESS=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_VALUE_IDX2
MASTER_INT_SRC=CONFIG_DRV_I2C_MASTER_INT_SRC_IDX2
SLAVE_INT_SRC=CONFIG_DRV_I2C_SLAVE_INT_SRC_IDX2
ERR_INT_SRC = CONFIG_DRV_I2C_ERR_MX_INT_SRC_IDX2
INT_VECTOR=CONFIG_DRV_I2C_INT_VECTOR_IDX2
ISR_VECTOR=CONFIG_DRV_I2C_ISR_VECTOR_IDX2
INT_PRIORITY=CONFIG_DRV_I2C_INT_PRIORITY_IDX2
INT_SUB_PRIORITY=CONFIG_DRV_I2C_INT_SUB_PRIORITY_IDX2
MASTER_INT_VECTOR=CONFIG_DRV_I2C_MASTER_INT_VECTOR_IDX2
MASTER_ISR_VECTOR=CONFIG_DRV_I2C_MASTER_ISR_VECTOR_IDX2
MASTER_INT_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_PRIORITY_IDX2
MASTER_INT_SUB_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_SUB_PRIORITY_IDX2
SLAVE_INT_VECTOR=CONFIG_DRV_I2C_SLAVE_INT_VECTOR_IDX2
SLAVE_ISR_VECTOR=CONFIG_DRV_I2C_SLAVE_ISR_VECTOR_IDX2
SLAVE_INT_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_PRIORITY_IDX2
SLAVE_INT_SUB_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_SUB_PRIORITY_IDX2
ERR_INT_VECTOR=CONFIG_DRV_I2C_ERR_INT_VECTOR_IDX2
ERR_INT_PRIORITY=CONFIG_DRV_I2C_ERR_INT_PRIORITY_IDX2
ERR_INT_SUB_PRIORITY=CONFIG_DRV_I2C_ERR_INT_SUB_PRIORITY_IDX2
PWR_MODE=CONFIG_DRV_I2C_POWER_STATE_IDX2/>
</#if>
<#if CONFIG_DRV_I2C_INST_IDX2 == true && (CONFIG_PIC32MZ == true || CONFIG_PIC32MK == true)>
<@DRV_I2C_STATIC_FUNCTIONS DRV_INSTANCE="2"
I2C_INSTANCE=CONFIG_DRV_I2C_PERIPHERAL_ID_IDX2
MODE=CONFIG_DRV_I2C_STATIC_OPERATION_MODE_IDX2
SLEW_RATE=CONFIG_DRV_I2C_STATIC_SLEW_RATE_CONTROL_IDX2
BRG_CLOCK=CONFIG_DRV_I2C_STATIC_BRG_CLOCK_IDX2
BAUD=CONFIG_DRV_I2C_STATIC_BAUD_RATE_IDX2
SMBus_SPEC=CONFIG_DRV_I2C_STATIC_SMBus_SPECIFICATION_IDX2
ADDRESS_WIDTH=CONFIG_DRV_I2C_STATIC_ADDRESS_WIDTH_IDX2
STRICT_ADDRESS_RULE=CONFIG_DRV_I2C_STATIC_STRICT_ADDRESS_RULE_IDX2
GENERAL_ADDRESS=CONFIG_DRV_I2C_STATIC_GENERAL_CALL_ADDRESS_IDX2
CLOCK_STRETCH=CONFIG_DRV_I2C_STATIC_CLOCK_STRETCH_IDX2
ADDRESS_MASK=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_MASK_IDX2
SLAVE_ADDRESS=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_VALUE_IDX2
MASTER_INT_SRC=CONFIG_DRV_I2C_MASTER_INT_SRC_IDX2
SLAVE_INT_SRC=CONFIG_DRV_I2C_SLAVE_INT_SRC_IDX2
ERR_INT_SRC = CONFIG_DRV_I2C_ERR_MZ_INT_SRC_IDX2
INT_VECTOR=CONFIG_DRV_I2C_INT_VECTOR_IDX2
ISR_VECTOR=CONFIG_DRV_I2C_ISR_VECTOR_IDX2
INT_PRIORITY=CONFIG_DRV_I2C_INT_PRIORITY_IDX2
INT_SUB_PRIORITY=CONFIG_DRV_I2C_INT_SUB_PRIORITY_IDX2
MASTER_INT_VECTOR=CONFIG_DRV_I2C_MASTER_INT_VECTOR_IDX2
MASTER_ISR_VECTOR=CONFIG_DRV_I2C_MASTER_ISR_VECTOR_IDX2
MASTER_INT_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_PRIORITY_IDX2
MASTER_INT_SUB_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_SUB_PRIORITY_IDX2
SLAVE_INT_VECTOR=CONFIG_DRV_I2C_SLAVE_INT_VECTOR_IDX2
SLAVE_ISR_VECTOR=CONFIG_DRV_I2C_SLAVE_ISR_VECTOR_IDX2
SLAVE_INT_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_PRIORITY_IDX2
SLAVE_INT_SUB_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_SUB_PRIORITY_IDX2
ERR_INT_VECTOR=CONFIG_DRV_I2C_ERR_INT_VECTOR_IDX2
ERR_INT_PRIORITY=CONFIG_DRV_I2C_ERR_INT_PRIORITY_IDX2
ERR_INT_SUB_PRIORITY=CONFIG_DRV_I2C_ERR_INT_SUB_PRIORITY_IDX2
PWR_MODE=CONFIG_DRV_I2C_POWER_STATE_IDX2/>
</#if>
<#if CONFIG_DRV_I2C_INST_IDX3 == true && CONFIG_PIC32MX == true>
<@DRV_I2C_STATIC_FUNCTIONS DRV_INSTANCE="3"
I2C_INSTANCE=CONFIG_DRV_I2C_PERIPHERAL_ID_IDX3
MODE=CONFIG_DRV_I2C_STATIC_OPERATION_MODE_IDX3
SLEW_RATE=CONFIG_DRV_I2C_STATIC_SLEW_RATE_CONTROL_IDX3
BRG_CLOCK=CONFIG_DRV_I2C_STATIC_BRG_CLOCK_IDX3
BAUD=CONFIG_DRV_I2C_STATIC_BAUD_RATE_IDX3
SMBus_SPEC=CONFIG_DRV_I2C_STATIC_SMBus_SPECIFICATION_IDX3
ADDRESS_WIDTH=CONFIG_DRV_I2C_STATIC_ADDRESS_WIDTH_IDX3
STRICT_ADDRESS_RULE=CONFIG_DRV_I2C_STATIC_STRICT_ADDRESS_RULE_IDX3
GENERAL_ADDRESS=CONFIG_DRV_I2C_STATIC_GENERAL_CALL_ADDRESS_IDX3
CLOCK_STRETCH=CONFIG_DRV_I2C_STATIC_CLOCK_STRETCH_IDX3
ADDRESS_MASK=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_MASK_IDX3
SLAVE_ADDRESS=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_VALUE_IDX3
MASTER_INT_SRC=CONFIG_DRV_I2C_MASTER_INT_SRC_IDX3
SLAVE_INT_SRC=CONFIG_DRV_I2C_SLAVE_INT_SRC_IDX3
ERR_INT_SRC = CONFIG_DRV_I2C_ERR_MX_INT_SRC_IDX3
INT_VECTOR=CONFIG_DRV_I2C_INT_VECTOR_IDX3
ISR_VECTOR=CONFIG_DRV_I2C_ISR_VECTOR_IDX3
INT_PRIORITY=CONFIG_DRV_I2C_INT_PRIORITY_IDX3
INT_SUB_PRIORITY=CONFIG_DRV_I2C_INT_SUB_PRIORITY_IDX3
MASTER_INT_VECTOR=CONFIG_DRV_I2C_MASTER_INT_VECTOR_IDX3
MASTER_ISR_VECTOR=CONFIG_DRV_I2C_MASTER_ISR_VECTOR_IDX3
MASTER_INT_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_PRIORITY_IDX3
MASTER_INT_SUB_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_SUB_PRIORITY_IDX3
SLAVE_INT_VECTOR=CONFIG_DRV_I2C_SLAVE_INT_VECTOR_IDX3
SLAVE_ISR_VECTOR=CONFIG_DRV_I2C_SLAVE_ISR_VECTOR_IDX3
SLAVE_INT_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_PRIORITY_IDX3
SLAVE_INT_SUB_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_SUB_PRIORITY_IDX3
ERR_INT_VECTOR=CONFIG_DRV_I2C_ERR_INT_VECTOR_IDX3
ERR_INT_PRIORITY=CONFIG_DRV_I2C_ERR_INT_PRIORITY_IDX3
ERR_INT_SUB_PRIORITY=CONFIG_DRV_I2C_ERR_INT_SUB_PRIORITY_IDX3
PWR_MODE=CONFIG_DRV_I2C_POWER_STATE_IDX3/>
</#if>
<#if CONFIG_DRV_I2C_INST_IDX3 == true && (CONFIG_PIC32MZ == true || CONFIG_PIC32MK == true)>
<@DRV_I2C_STATIC_FUNCTIONS DRV_INSTANCE="3"
I2C_INSTANCE=CONFIG_DRV_I2C_PERIPHERAL_ID_IDX3
MODE=CONFIG_DRV_I2C_STATIC_OPERATION_MODE_IDX3
SLEW_RATE=CONFIG_DRV_I2C_STATIC_SLEW_RATE_CONTROL_IDX3
BRG_CLOCK=CONFIG_DRV_I2C_STATIC_BRG_CLOCK_IDX3
BAUD=CONFIG_DRV_I2C_STATIC_BAUD_RATE_IDX3
SMBus_SPEC=CONFIG_DRV_I2C_STATIC_SMBus_SPECIFICATION_IDX3
ADDRESS_WIDTH=CONFIG_DRV_I2C_STATIC_ADDRESS_WIDTH_IDX3
STRICT_ADDRESS_RULE=CONFIG_DRV_I2C_STATIC_STRICT_ADDRESS_RULE_IDX3
GENERAL_ADDRESS=CONFIG_DRV_I2C_STATIC_GENERAL_CALL_ADDRESS_IDX3
CLOCK_STRETCH=CONFIG_DRV_I2C_STATIC_CLOCK_STRETCH_IDX3
ADDRESS_MASK=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_MASK_IDX3
SLAVE_ADDRESS=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_VALUE_IDX3
MASTER_INT_SRC=CONFIG_DRV_I2C_MASTER_INT_SRC_IDX3
SLAVE_INT_SRC=CONFIG_DRV_I2C_SLAVE_INT_SRC_IDX3
ERR_INT_SRC = CONFIG_DRV_I2C_ERR_MZ_INT_SRC_IDX3
INT_VECTOR=CONFIG_DRV_I2C_INT_VECTOR_IDX3
ISR_VECTOR=CONFIG_DRV_I2C_ISR_VECTOR_IDX3
INT_PRIORITY=CONFIG_DRV_I2C_INT_PRIORITY_IDX3
INT_SUB_PRIORITY=CONFIG_DRV_I2C_INT_SUB_PRIORITY_IDX3
MASTER_INT_VECTOR=CONFIG_DRV_I2C_MASTER_INT_VECTOR_IDX3
MASTER_ISR_VECTOR=CONFIG_DRV_I2C_MASTER_ISR_VECTOR_IDX3
MASTER_INT_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_PRIORITY_IDX3
MASTER_INT_SUB_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_SUB_PRIORITY_IDX3
SLAVE_INT_VECTOR=CONFIG_DRV_I2C_SLAVE_INT_VECTOR_IDX3
SLAVE_ISR_VECTOR=CONFIG_DRV_I2C_SLAVE_ISR_VECTOR_IDX3
SLAVE_INT_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_PRIORITY_IDX3
SLAVE_INT_SUB_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_SUB_PRIORITY_IDX3
ERR_INT_VECTOR=CONFIG_DRV_I2C_ERR_INT_VECTOR_IDX3
ERR_INT_PRIORITY=CONFIG_DRV_I2C_ERR_INT_PRIORITY_IDX3
ERR_INT_SUB_PRIORITY=CONFIG_DRV_I2C_ERR_INT_SUB_PRIORITY_IDX3
PWR_MODE=CONFIG_DRV_I2C_POWER_STATE_IDX3/>
</#if>
<#if CONFIG_DRV_I2C_INST_IDX4 == true && CONFIG_PIC32MX == true>
<@DRV_I2C_STATIC_FUNCTIONS DRV_INSTANCE="4"
I2C_INSTANCE=CONFIG_DRV_I2C_PERIPHERAL_ID_IDX4
MODE=CONFIG_DRV_I2C_STATIC_OPERATION_MODE_IDX4
SLEW_RATE=CONFIG_DRV_I2C_STATIC_SLEW_RATE_CONTROL_IDX4
BRG_CLOCK=CONFIG_DRV_I2C_STATIC_BRG_CLOCK_IDX4
BAUD=CONFIG_DRV_I2C_STATIC_BAUD_RATE_IDX4
SMBus_SPEC=CONFIG_DRV_I2C_STATIC_SMBus_SPECIFICATION_IDX4
ADDRESS_WIDTH=CONFIG_DRV_I2C_STATIC_ADDRESS_WIDTH_IDX4
STRICT_ADDRESS_RULE=CONFIG_DRV_I2C_STATIC_STRICT_ADDRESS_RULE_IDX4
GENERAL_ADDRESS=CONFIG_DRV_I2C_STATIC_GENERAL_CALL_ADDRESS_IDX4
CLOCK_STRETCH=CONFIG_DRV_I2C_STATIC_CLOCK_STRETCH_IDX4
ADDRESS_MASK=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_MASK_IDX4
SLAVE_ADDRESS=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_VALUE_IDX4
MASTER_INT_SRC=CONFIG_DRV_I2C_MASTER_INT_SRC_IDX4
SLAVE_INT_SRC=CONFIG_DRV_I2C_SLAVE_INT_SRC_IDX4
ERR_INT_SRC = CONFIG_DRV_I2C_ERR_MX_INT_SRC_IDX4
INT_VECTOR=CONFIG_DRV_I2C_INT_VECTOR_IDX4
ISR_VECTOR=CONFIG_DRV_I2C_ISR_VECTOR_IDX4
INT_PRIORITY=CONFIG_DRV_I2C_INT_PRIORITY_IDX4
INT_SUB_PRIORITY=CONFIG_DRV_I2C_INT_SUB_PRIORITY_IDX4
MASTER_INT_VECTOR=CONFIG_DRV_I2C_MASTER_INT_VECTOR_IDX4
MASTER_ISR_VECTOR=CONFIG_DRV_I2C_MASTER_ISR_VECTOR_IDX4
MASTER_INT_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_PRIORITY_IDX4
MASTER_INT_SUB_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_SUB_PRIORITY_IDX4
SLAVE_INT_VECTOR=CONFIG_DRV_I2C_SLAVE_INT_VECTOR_IDX4
SLAVE_ISR_VECTOR=CONFIG_DRV_I2C_SLAVE_ISR_VECTOR_IDX4
SLAVE_INT_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_PRIORITY_IDX4
SLAVE_INT_SUB_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_SUB_PRIORITY_IDX4
ERR_INT_VECTOR=CONFIG_DRV_I2C_ERR_INT_VECTOR_IDX4
ERR_INT_PRIORITY=CONFIG_DRV_I2C_ERR_INT_PRIORITY_IDX4
ERR_INT_SUB_PRIORITY=CONFIG_DRV_I2C_ERR_INT_SUB_PRIORITY_IDX4
PWR_MODE=CONFIG_DRV_I2C_POWER_STATE_IDX4/>
</#if>
<#if CONFIG_DRV_I2C_INST_IDX4 == true && CONFIG_PIC32MZ == true>
<@DRV_I2C_STATIC_FUNCTIONS DRV_INSTANCE="4"
I2C_INSTANCE=CONFIG_DRV_I2C_PERIPHERAL_ID_IDX4
MODE=CONFIG_DRV_I2C_STATIC_OPERATION_MODE_IDX4
SLEW_RATE=CONFIG_DRV_I2C_STATIC_SLEW_RATE_CONTROL_IDX4
BRG_CLOCK=CONFIG_DRV_I2C_STATIC_BRG_CLOCK_IDX4
BAUD=CONFIG_DRV_I2C_STATIC_BAUD_RATE_IDX4
SMBus_SPEC=CONFIG_DRV_I2C_STATIC_SMBus_SPECIFICATION_IDX4
ADDRESS_WIDTH=CONFIG_DRV_I2C_STATIC_ADDRESS_WIDTH_IDX4
STRICT_ADDRESS_RULE=CONFIG_DRV_I2C_STATIC_STRICT_ADDRESS_RULE_IDX4
GENERAL_ADDRESS=CONFIG_DRV_I2C_STATIC_GENERAL_CALL_ADDRESS_IDX4
CLOCK_STRETCH=CONFIG_DRV_I2C_STATIC_CLOCK_STRETCH_IDX4
ADDRESS_MASK=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_MASK_IDX4
SLAVE_ADDRESS=CONFIG_DRV_I2C_STATIC_SLAVE_ADDRESS_VALUE_IDX4
MASTER_INT_SRC=CONFIG_DRV_I2C_MASTER_INT_SRC_IDX4
SLAVE_INT_SRC=CONFIG_DRV_I2C_SLAVE_INT_SRC_IDX4
ERR_INT_SRC = CONFIG_DRV_I2C_ERR_MZ_INT_SRC_IDX4
INT_VECTOR=CONFIG_DRV_I2C_INT_VECTOR_IDX4
ISR_VECTOR=CONFIG_DRV_I2C_ISR_VECTOR_IDX4
INT_PRIORITY=CONFIG_DRV_I2C_INT_PRIORITY_IDX4
INT_SUB_PRIORITY=CONFIG_DRV_I2C_INT_SUB_PRIORITY_IDX4
MASTER_INT_VECTOR=CONFIG_DRV_I2C_MASTER_INT_VECTOR_IDX4
MASTER_ISR_VECTOR=CONFIG_DRV_I2C_MASTER_ISR_VECTOR_IDX4
MASTER_INT_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_PRIORITY_IDX4
MASTER_INT_SUB_PRIORITY=CONFIG_DRV_I2C_MASTER_INT_SUB_PRIORITY_IDX4
SLAVE_INT_VECTOR=CONFIG_DRV_I2C_SLAVE_INT_VECTOR_IDX4
SLAVE_ISR_VECTOR=CONFIG_DRV_I2C_SLAVE_ISR_VECTOR_IDX4
SLAVE_INT_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_PRIORITY_IDX4
SLAVE_INT_SUB_PRIORITY=CONFIG_DRV_I2C_SLAVE_INT_SUB_PRIORITY_IDX4
ERR_INT_VECTOR=CONFIG_DRV_I2C_ERR_INT_VECTOR_IDX4
ERR_INT_PRIORITY=CONFIG_DRV_I2C_ERR_INT_PRIORITY_IDX4
ERR_INT_SUB_PRIORITY=CONFIG_DRV_I2C_ERR_INT_SUB_PRIORITY_IDX4
PWR_MODE=CONFIG_DRV_I2C_POWER_STATE_IDX4/>
</#if>

/*******************************************************************************
 End of File
*/