<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
/***********************************************************************************************************************
  Purpose: Module Description File (MDF) Example (Schema Version 2.0)
           This is a description of a sample FIT module configuration file
***********************************************************************************************************************/
-->
<module xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" schemaVersion="2.0" xs:noNamespaceSchemaLocation="schema_mdf_2.00.xsd">
    <fileVersion>1.00</fileVersion>
    <formatVersion>2.00</formatVersion>
    <fileTemplate></fileTemplate>
    <configuration>
        <property id="BSP_CFG_STARTUP_DISABLE" display="Startup select" default="0" type="combobox">
            <option id="BSP_CFG_STARTUP_DISABLE.0" display="Enable (use BSP startup)" value="0"/>
            <option id="BSP_CFG_STARTUP_DISABLE.1" display="Disable" value="1"/>
            <description>0 = Enable BSP startup program.
1 = Disable BSP startup program. (e.g. Using user startup program.)</description>
        </property>
        <property id="BSP_CFG_USER_STACK_ENABLE" display="User stack setting" default="1" type="combobox">
            <option id="BSP_CFG_USER_STACK_ENABLE.0" display="1 stack" value="0"/>
            <option id="BSP_CFG_USER_STACK_ENABLE.1" display="2 stacks" value="1"/>
            <description>0 = Use 1 stack. Disable user stack. User stack size set below will be ignored.
1 = Use 2 stacks. User stack and interrupt stack will both be used.</description>
        </property>
        <property id="#pragma stacksize su" display="User stack size" default="0x1000" keyword="    #pragma stacksize su=%s" type="textbox">
            <constraint display="when Startup select is Use Enable (use BSP startup) only" actionOnFail="disable">${BSP_CFG_STARTUP_DISABLE} == ${BSP_CFG_STARTUP_DISABLE.0}</constraint>
            <constraint display="when User stack setting is 2 stacks only" actionOnFail="disable">${BSP_CFG_USER_STACK_ENABLE} == ${BSP_CFG_USER_STACK_ENABLE.1}</constraint>
            <constraint display="Value must be an hexadecimal value" actionOnFail="error">testHexInteger("${#pragma stacksize su}")</constraint>
            <constraint display="Value must be in the range (0x1~RAM capacity)" actionOnFail="error">("${#pragma stacksize su}" &gt;= 1) &amp;&amp; ("${#pragma stacksize su}" &lt;= (${Device.ramSize} * 1024))</constraint>
            <description>User stack size</description>
        </property>
        <property id="#pragma stacksize si" display="interrupt stack size" default="0x400" keyword="#pragma stacksize si=%s" type="textbox">
            <constraint display="when Startup select is Use Enable (use BSP startup) only" actionOnFail="disable">${BSP_CFG_STARTUP_DISABLE} == ${BSP_CFG_STARTUP_DISABLE.0}</constraint>
            <constraint display="Value must be an hexadecimal value" actionOnFail="error">testHexInteger("${#pragma stacksize si}")</constraint>
            <constraint display="Value must be in the range (0x1~RAM capacity)" actionOnFail="error">("${#pragma stacksize si}" &gt;= 1) &amp;&amp; ("${#pragma stacksize si}" &lt;= (${Device.ramSize} * 1024))</constraint>
            <description>Interrupt stack  size</description>
        </property>
        <property id="BSP_CFG_HEAP_BYTES" display="Heap size" default="0x400" type="textbox">
            <constraint display="Value must be an hexadecimal value">testHexInteger("${BSP_CFG_HEAP_BYTES}")</constraint>
            <constraint display="Value must be in the range (0x1~RAM capacity)">("${BSP_CFG_HEAP_BYTES}" &gt;= 1) &amp;&amp; ("${BSP_CFG_HEAP_BYTES}" &lt;= (${Device.ramSize} * 1024))</constraint>
            <description>Heap size</description>
        </property>
        <property id="BSP_CFG_IO_LIB_ENABLE" display="Initializes C input and output library functions" default="1" type="combobox">
            <option id="BSP_CFG_IO_LIB_ENABLE.0" display="Disable" value="0"/>
            <option id="BSP_CFG_IO_LIB_ENABLE.1" display="Enable" value="1"/>
            <description>0 = Disable I/O library initialization in resetprg.c.
       If you are not using stdio then use this value.
1 = Enable I/O library initialization in resetprg.c.
      This is default and needed if you are using stdio.</description>
        </property>
        <property id="BSP_CFG_USER_CHARGET_ENABLED" display="Enable user stdio charget function" default="0" type="combobox">
            <option id="BSP_CFG_USER_CHARGET_ENABLED.0" display="Use BSP charget() function" value="0"/>
            <option id="BSP_CFG_USER_CHARGET_ENABLED.1" display="Use user charget() function" value="1"/>
            <description>0 = Use BSP charget() function.
1 = Use user charget() function.</description>
        </property>
        <property id="BSP_CFG_USER_CHARGET_FUNCTION" display="User stdio charget function name" default="my_sw_charget_function" type="textbox">
            <constraint display="when Enable user stdio charget function is Use user charget() function only" actionOnFail="disable">${BSP_CFG_USER_CHARGET_ENABLED} == ${BSP_CFG_USER_CHARGET_ENABLED.1}</constraint>
            <constraint display="Please enter a valid function name without spaces or funny characters" actionOnFail="error">testSymbol("${BSP_CFG_USER_CHARGET_FUNCTION}")</constraint>
            <description>User charget() function name.</description>
        </property>
        <property id="BSP_CFG_USER_CHARPUT_ENABLED" display="Enable user stdio charput function" default="0" type="combobox">
            <option id="BSP_CFG_USER_CHARPUT_ENABLED.0" display="Use BSP charput() function" value="0"/>
            <option id="BSP_CFG_USER_CHARPUT_ENABLED.1" display="Use user charput() function" value="1"/>
            <description>0 = Use BSP charput() function.
1 = Use user charput() function.</description>
        </property>
        <property id="BSP_CFG_USER_CHARPUT_FUNCTION" display="User stdio charput function name" default="my_sw_charput_function" type="textbox">
            <constraint display="when Enable user stdio charput function is Use user charput() function only" actionOnFail="disable">${BSP_CFG_USER_CHARPUT_ENABLED} == ${BSP_CFG_USER_CHARPUT_ENABLED.1}</constraint>
            <constraint display="Please enter a valid function name without spaces or funny characters" actionOnFail="error">testSymbol("${BSP_CFG_USER_CHARPUT_FUNCTION}")</constraint>
            <description>User charput() function name.</description>
        </property>
        <property id="BSP_CFG_RUN_IN_USER_MODE" display="Processor Mode" default="0" type="combobox">
            <option id="BSP_CFG_RUN_IN_USER_MODE.0" display="Stay in Supervisor mode" value="0"/>
            <option id="BSP_CFG_RUN_IN_USER_MODE.1" display="Switch to User mode" value="1"/>
            <description>0 = Stay in Supervisor mode.
1 = Switch to User mode.</description>
        </property>
        <property id="BSP_CFG_ID_CODE_LONG_1" display="ID code 1" default="0xFFFFFFFF" type="textbox">
            <constraint display="Value must be an hexadecimal value">testHexInteger("${BSP_CFG_ID_CODE_LONG_1}")</constraint>
            <constraint display="Value must be in the range (0x00000000~0xFFFFFFFF)">("${BSP_CFG_ID_CODE_LONG_1}" &gt;= 0) &amp;&amp; ("${BSP_CFG_ID_CODE_LONG_1}" &lt;= 0xFFFFFFFF)</constraint>
            <description>Set your desired ID code. NOTE, leave at the default (all 0xFF's) if you do not wish to use an ID code. If you set this value and program it into the MCU then you will need to remember the ID code because the debugger will ask for it when trying to connect. Note that the E1/E20 will ignore the ID code when programming the MCU during debugging.
If you set this value and then forget it then you can clear the ID code by connecting up in serial boot mode using FDT. The ID Code is 16 bytes long. The macro below define the ID Code in 4-byte sections.</description>
        </property>
        <property id="BSP_CFG_ID_CODE_LONG_2" display="ID code 2" default="0xFFFFFFFF" type="textbox">
            <constraint display="Value must be an hexadecimal value">testHexInteger("${BSP_CFG_ID_CODE_LONG_2}")</constraint>
            <constraint display="Value must be in the range (0x00000000~0xFFFFFFFF)">("${BSP_CFG_ID_CODE_LONG_2}" &gt;= 0) &amp;&amp; ("${BSP_CFG_ID_CODE_LONG_2}" &lt;= 0xFFFFFFFF)</constraint>
            <description>Set your desired ID code. NOTE, leave at the default (all 0xFF's) if you do not wish to use an ID code. If you set this value and program it into the MCU then you will need to remember the ID code because the debugger will ask for it when trying to connect. Note that the E1/E20 will ignore the ID code when programming the MCU during debugging.
If you set this value and then forget it then you can clear the ID code by connecting up in serial boot mode using FDT. The ID Code is 16 bytes long. The macro below define the ID Code in 4-byte sections.</description>
        </property>
        <property id="BSP_CFG_ID_CODE_LONG_3" display="ID code 3" default="0xFFFFFFFF" type="textbox">
            <constraint display="Value must be an hexadecimal value">testHexInteger("${BSP_CFG_ID_CODE_LONG_3}")</constraint>
            <constraint display="Value must be in the range (0x00000000~0xFFFFFFFF)">("${BSP_CFG_ID_CODE_LONG_3}" &gt;= 0) &amp;&amp; ("${BSP_CFG_ID_CODE_LONG_3}" &lt;= 0xFFFFFFFF)</constraint>
            <description>Set your desired ID code. NOTE, leave at the default (all 0xFF's) if you do not wish to use an ID code. If you set this value and program it into the MCU then you will need to remember the ID code because the debugger will ask for it when trying to connect. Note that the E1/E20 will ignore the ID code when programming the MCU during debugging.
If you set this value and then forget it then you can clear the ID code by connecting up in serial boot mode using FDT. The ID Code is 16 bytes long. The macro below define the ID Code in 4-byte sections.</description>
        </property>
        <property id="BSP_CFG_ID_CODE_LONG_4" display="ID code 4" default="0xFFFFFFFF" type="textbox">
            <constraint display="Value must be an hexadecimal value">testHexInteger("${BSP_CFG_ID_CODE_LONG_4}")</constraint>
            <constraint display="Value must be in the range (0x00000000~0xFFFFFFFF)">("${BSP_CFG_ID_CODE_LONG_4}" &gt;= 0) &amp;&amp; ("${BSP_CFG_ID_CODE_LONG_4}" &lt;= 0xFFFFFFFF)</constraint>
            <description>Set your desired ID code. NOTE, leave at the default (all 0xFF's) if you do not wish to use an ID code. If you set this value and program it into the MCU then you will need to remember the ID code because the debugger will ask for it when trying to connect. Note that the E1/E20 will ignore the ID code when programming the MCU during debugging.
If you set this value and then forget it then you can clear the ID code by connecting up in serial boot mode using FDT. The ID Code is 16 bytes long. The macro below define the ID Code in 4-byte sections.</description>
        </property>
        <property id="BSP_CFG_ROM_CACHE_ENABLE" display="ROM Cache Enable Register" default="0" type="combobox">
            <option id="BSP_CFG_ROM_CACHE_ENABLE.0" display="Disabled" value="0"/>
            <option id="BSP_CFG_ROM_CACHE_ENABLE.1" display="Enabled" value="1"/>
            <description>0 = ROM cache operation disabled.
1 = ROM cache operation enabled.</description>
        </property>
        <property id="BSP_CFG_TRUSTED_MODE_FUNCTION" display="TMEF - TM Enable Flag Register" default="0xFFFFFFFF" type="textbox">
            <constraint display="Value must be an hexadecimal value">testHexInteger("${BSP_CFG_TRUSTED_MODE_FUNCTION}")</constraint>
            <constraint display="Value must be in the range 0x00000000~0xFFFFFFFF">("${BSP_CFG_TRUSTED_MODE_FUNCTION}" &gt;= 0) &amp;&amp; ("${BSP_CFG_TRUSTED_MODE_FUNCTION}" &lt;= 0xFFFFFFFF)</constraint>
            <description>TMEF register value.</description>
        </property>
        <property id="BSP_CFG_FAW_REG_VALUE" display="FAW - Flash Access Window Setting Register" default="0xFFFFFFFF" type="textbox">
            <constraint display="Value must be an hexadecimal value">testHexInteger("${BSP_CFG_FAW_REG_VALUE}")</constraint>
            <constraint display="Value must be in the range 0x00000000~0xFFFFFFFF">("${BSP_CFG_FAW_REG_VALUE}" &gt;= 0) &amp;&amp; ("${BSP_CFG_FAW_REG_VALUE}" &lt;= 0xFFFFFFFF)</constraint>
            <description>FAW register value.</description>
        </property>
        <property id="BSP_CFG_ROMCODE_REG_VALUE" display="ROMCODE - ROM Code Protection Register" default="0xFFFFFFFF" type="textbox">
            <constraint display="Value must be an hexadecimal value">testHexInteger("${BSP_CFG_ROMCODE_REG_VALUE}")</constraint>
            <constraint display="Value must be in the range 0x00000000~0xFFFFFFFF">("${BSP_CFG_ROMCODE_REG_VALUE}" &gt;= 0) &amp;&amp; ("${BSP_CFG_ROMCODE_REG_VALUE}" &lt;= 0xFFFFFFFF)</constraint>
            <description>ROMCODE register value.</description>
        </property>
        <property id="BSP_CFG_CODE_FLASH_BANK_MODE" display="Select the bank mode" default="1" type="combobox">
            <option id="BSP_CFG_CODE_FLASH_BANK_MODE.0" display="Dual mode" value="0"/>
            <option id="BSP_CFG_CODE_FLASH_BANK_MODE.1" display="Linear mode" value="1"/>
            <description>0 = Dual mode.
1 = Linear mode.</description>
        </property>
        <property id="BSP_CFG_CODE_FLASH_START_BANK" display="Select the startup bank" default="0" type="combobox">
            <option id="BSP_CFG_CODE_FLASH_START_BANK.0" display="Bank 1: FFE00000h~FFEFFFFFh; Bank 0:  FFF00000h~FFFFFFFFh." value="0"/>
            <option id="BSP_CFG_CODE_FLASH_START_BANK.1" display="Bank 1: FFF00000h~FFFFFFFFh; Bank 0: FFE00000h~FFEFFFFFh." value="1"/>
            <description>0 = The address range of bank 1 from FFE00000h to FFEFFFFFh and bank 0 from FFF00000h to FFFFFFFFh.
1 = The address range of bank 1 from FFF00000h to FFFFFFFFh and bank 0 from FFE00000h to FFEFFFFFh.</description>
        </property>
        <property id="BSP_CFG_USER_LOCKING_ENABLED" display="Lock function select" default="0" type="combobox">
            <option id="BSP_CFG_USER_LOCKING_ENABLED.0" display="Use default locking (non-RTOS)" value="0"/>
            <option id="BSP_CFG_USER_LOCKING_ENABLED.1" display="Use user defined locking mechanism " value="1"/>
            <description>0 = Use default locking (non-RTOS)
1 = Use user defined locking mechanism. </description>
        </property>
        <property id="BSP_CFG_USER_LOCKING_TYPE" display="Lock function type" default="bsp_lock_t" type="textbox">
            <constraint display="when Lock function select is Use user defined locking mechanism only" actionOnFail="disable">${BSP_CFG_USER_LOCKING_ENABLED} == ${BSP_CFG_USER_LOCKING_ENABLED.1}</constraint>
            <constraint display="Please enter a valid type name without spaces or funny characters" actionOnFail="error">testSymbol("${BSP_CFG_USER_LOCKING_TYPE}")</constraint>
            <description>Data type to be used for locks.</description>
        </property>
        <property id="BSP_CFG_USER_LOCKING_HW_LOCK_FUNCTION" display="HW lock function name" default="my_hw_locking_function" type="textbox">
            <constraint display="when Lock function select is Use user defined locking mechanism only" actionOnFail="disable">${BSP_CFG_USER_LOCKING_ENABLED} == ${BSP_CFG_USER_LOCKING_ENABLED.1}</constraint>
            <constraint display="Please enter a valid function name without spaces or funny characters" actionOnFail="error">testSymbol("${BSP_CFG_USER_LOCKING_HW_LOCK_FUNCTION}")</constraint>
            <description>User defined functions to be called when r_bsp lock functions are overridden by user.</description>
        </property>
        <property id="BSP_CFG_USER_LOCKING_HW_UNLOCK_FUNCTION" display="HW unlock function name" default="my_hw_unlocking_function" type="textbox">
            <constraint display="when Lock function select is Use user defined locking mechanism only" actionOnFail="disable">${BSP_CFG_USER_LOCKING_ENABLED} == ${BSP_CFG_USER_LOCKING_ENABLED.1}</constraint>
            <constraint display="Please enter a valid function name without spaces or funny characters" actionOnFail="error">testSymbol("${BSP_CFG_USER_LOCKING_HW_UNLOCK_FUNCTION}")</constraint>
            <description>User defined functions to be called when r_bsp lock functions are overridden by user.</description>
        </property>
        <property id="BSP_CFG_USER_LOCKING_SW_LOCK_FUNCTION" display="SW lock function name" default="my_sw_locking_function" type="textbox">
            <constraint display="when Lock function select is Use user defined locking mechanism only" actionOnFail="disable">${BSP_CFG_USER_LOCKING_ENABLED} == ${BSP_CFG_USER_LOCKING_ENABLED.1}</constraint>
            <constraint display="Please enter a valid function name without spaces or funny characters" actionOnFail="error">testSymbol("${BSP_CFG_USER_LOCKING_SW_LOCK_FUNCTION}")</constraint>
            <description>User defined functions to be called when r_bsp lock functions are overridden by user.</description>
        </property>
        <property id="BSP_CFG_USER_LOCKING_SW_UNLOCK_FUNCTION" display="SW unlock function name" default="my_sw_unlocking_function" type="textbox">
            <constraint display="when Lock function select is Use user defined locking mechanism only" actionOnFail="disable">${BSP_CFG_USER_LOCKING_ENABLED} == ${BSP_CFG_USER_LOCKING_ENABLED.1}</constraint>
            <constraint display="Please enter a valid function name without spaces or funny characters" actionOnFail="error">testSymbol("${BSP_CFG_USER_LOCKING_SW_UNLOCK_FUNCTION}")</constraint>
            <description>User defined functions to be called when r_bsp lock functions are overridden by user.</description>
        </property>
        <property id="BSP_CFG_USER_WARM_START_CALLBACK_PRE_INITC_ENABLED" display="Enable user warm start callback (PRE)" default="0" type="combobox">
            <option id="BSP_CFG_USER_WARM_START_CALLBACK_PRE_INITC_ENABLED.0" display="Unused" value="0"/>
            <option id="BSP_CFG_USER_WARM_START_CALLBACK_PRE_INITC_ENABLED.1" display="Used" value="1"/>
            <description>0 = Warm start callback pre function is not to be used.
1 = Warm start callback pre function is to be used.</description>
        </property>
        <property id="BSP_CFG_USER_WARM_START_PRE_C_FUNCTION" display="User warm start callback  function name (PRE)" default="my_sw_warmstart_prec_function" type="textbox">
            <constraint display="when User warm start callback  function name (PRE) is Used only" actionOnFail="disable">${BSP_CFG_USER_WARM_START_CALLBACK_PRE_INITC_ENABLED} == ${BSP_CFG_USER_WARM_START_CALLBACK_PRE_INITC_ENABLED.1}</constraint>
            <constraint display="Please enter a valid function name without spaces or funny characters" actionOnFail="error">testSymbol("${BSP_CFG_USER_WARM_START_PRE_C_FUNCTION}")</constraint>
            <description>User warm start callback pre function name.</description>
        </property>
        <property id="BSP_CFG_USER_WARM_START_CALLBACK_POST_INITC_ENABLED" display="Enable user warm start callback (POST)" default="0" type="combobox">
            <option id="BSP_CFG_USER_WARM_START_CALLBACK_POST_INITC_ENABLED.0" display="Unused" value="0"/>
            <option id="BSP_CFG_USER_WARM_START_CALLBACK_POST_INITC_ENABLED.1" display="Used" value="1"/>
            <description>0 = Warm start callback post function is not to be used.
1 = Warm start callback post function is to be used.</description>
        </property>
        <property id="BSP_CFG_USER_WARM_START_POST_C_FUNCTION" display="User warm start callback  function name (POST)" default="my_sw_warmstart_postc_function" type="textbox">
            <constraint display="when User warm start callback  function name (POST) is Used only" actionOnFail="disable">${BSP_CFG_USER_WARM_START_CALLBACK_POST_INITC_ENABLED} == ${BSP_CFG_USER_WARM_START_CALLBACK_POST_INITC_ENABLED.1}</constraint>
            <constraint display="Please enter a valid function name without spaces or funny characters" actionOnFail="error">testSymbol("${BSP_CFG_USER_WARM_START_POST_C_FUNCTION}")</constraint>
            <description>User warm start callback post function name.</description>
        </property>
        <property id="BSP_CFG_PARAM_CHECKING_ENABLE" display="Parameter checking" default="1" type="combobox">
            <option id="BSP_CFG_PARAM_CHECKING_ENABLE.0" display="Disabled" value="0"/>
            <option id="BSP_CFG_PARAM_CHECKING_ENABLE.1" display="Enabled" value="1"/>
            <description>0 = Global setting for parameter checking is disabled. 
1 = Global setting for parameter checking is enabled.</description>
        </property>
        <property id="BSP_CFG_EBMAPCR_1ST_PRIORITY" display="Extended Bus Master 1st Priority Selection" default="0" type="combobox">
            <option id="BSP_CFG_EBMAPCR_1ST_PRIORITY.0" display="GLCDC graphics 1 data read" value="0"/>
            <option id="BSP_CFG_EBMAPCR_1ST_PRIORITY.1" display="DRW2D texture data read" value="1"/>
            <option id="BSP_CFG_EBMAPCR_1ST_PRIORITY.2" display="DRW2D frame buffer data read write and display list data read" value="2"/>
            <option id="BSP_CFG_EBMAPCR_1ST_PRIORITY.3" display="GLCDC graphics 2 data read" value="3"/>
            <option id="BSP_CFG_EBMAPCR_1ST_PRIORITY.4" display="EDMAC" value="4"/>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_1ST_PRIORITY}" != "${BSP_CFG_EBMAPCR_2ND_PRIORITY}")</constraint>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_1ST_PRIORITY}" != "${BSP_CFG_EBMAPCR_3RD_PRIORITY}")</constraint>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_1ST_PRIORITY}" != "${BSP_CFG_EBMAPCR_4TH_PRIORITY}")</constraint>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_1ST_PRIORITY}" != "${BSP_CFG_EBMAPCR_5TH_PRIORITY}")</constraint>
            <description>The extended bus master has five transfer sources: EDMAC, GLCDC-GRA1 (GLCDC graphics 1 data read), GLCDCGRA2 (GLCDC graphics 2 data read), DRW2D-TX (DRW2D texture data read), and DRW2D-FB (DRW2D frame buffer data read write and display list data read).
The default priority order in bsp is below
   GLCDC-GRA1 > GLCDC-GRA2 > DRW2D-TX > DRW2D-FB > EDMAC.
   Priority can be changed with this macro.
   
Extended Bus Master Priority setting
   0 = GLCDC graphics 1 data read
   1 = DRW2D texture data read
   2 = DRW2D frame buffer data read write and display list data read
   3 = GLCDC graphics 2 data read
   4 = EDMAC</description>
        </property>
        <property id="BSP_CFG_EBMAPCR_2ND_PRIORITY" display="Extended Bus Master 2nd Priority Selection" default="3" type="combobox">
            <option id="BSP_CFG_EBMAPCR_2ND_PRIORITY.0" display="GLCDC graphics 1 data read" value="0"/>
            <option id="BSP_CFG_EBMAPCR_2ND_PRIORITY.1" display="DRW2D texture data read" value="1"/>
            <option id="BSP_CFG_EBMAPCR_2ND_PRIORITY.2" display="DRW2D frame buffer data read write and display list data read" value="2"/>
            <option id="BSP_CFG_EBMAPCR_2ND_PRIORITY.3" display="GLCDC graphics 2 data read" value="3"/>
            <option id="BSP_CFG_EBMAPCR_2ND_PRIORITY.4" display="EDMAC" value="4"/>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_2ND_PRIORITY}" != "${BSP_CFG_EBMAPCR_1ST_PRIORITY}")</constraint>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_2ND_PRIORITY}" != "${BSP_CFG_EBMAPCR_3RD_PRIORITY}")</constraint>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_2ND_PRIORITY}" != "${BSP_CFG_EBMAPCR_4TH_PRIORITY}")</constraint>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_2ND_PRIORITY}" != "${BSP_CFG_EBMAPCR_5TH_PRIORITY}")</constraint>
            <description>The extended bus master has five transfer sources: EDMAC, GLCDC-GRA1 (GLCDC graphics 1 data read), GLCDCGRA2 (GLCDC graphics 2 data read), DRW2D-TX (DRW2D texture data read), and DRW2D-FB (DRW2D frame buffer data read write and display list data read).
The default priority order in bsp is below
   GLCDC-GRA1 > GLCDC-GRA2 > DRW2D-TX > DRW2D-FB > EDMAC.
   Priority can be changed with this macro.
   
Extended Bus Master Priority setting
   0 = GLCDC graphics 1 data read
   1 = DRW2D texture data read
   2 = DRW2D frame buffer data read write and display list data read
   3 = GLCDC graphics 2 data read
   4 = EDMAC</description>
        </property>
        <property id="BSP_CFG_EBMAPCR_3RD_PRIORITY" display="Extended Bus Master 3rd Priority Selection" default="1" type="combobox">
            <option id="BSP_CFG_EBMAPCR_3RD_PRIORITY.0" display="GLCDC graphics 1 data read" value="0"/>
            <option id="BSP_CFG_EBMAPCR_3RD_PRIORITY.1" display="DRW2D texture data read" value="1"/>
            <option id="BSP_CFG_EBMAPCR_3RD_PRIORITY.2" display="DRW2D frame buffer data read write and display list data read" value="2"/>
            <option id="BSP_CFG_EBMAPCR_3RD_PRIORITY.3" display="GLCDC graphics 2 data read" value="3"/>
            <option id="BSP_CFG_EBMAPCR_3RD_PRIORITY.4" display="EDMAC" value="4"/>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_3RD_PRIORITY}" != "${BSP_CFG_EBMAPCR_1ST_PRIORITY}")</constraint>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_3RD_PRIORITY}" != "${BSP_CFG_EBMAPCR_2ND_PRIORITY}")</constraint>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_3RD_PRIORITY}" != "${BSP_CFG_EBMAPCR_4TH_PRIORITY}")</constraint>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_3RD_PRIORITY}" != "${BSP_CFG_EBMAPCR_5TH_PRIORITY}")</constraint>
            <description>The extended bus master has five transfer sources: EDMAC, GLCDC-GRA1 (GLCDC graphics 1 data read), GLCDCGRA2 (GLCDC graphics 2 data read), DRW2D-TX (DRW2D texture data read), and DRW2D-FB (DRW2D frame buffer data read write and display list data read).
The default priority order in bsp is below
   GLCDC-GRA1 > GLCDC-GRA2 > DRW2D-TX > DRW2D-FB > EDMAC.
   Priority can be changed with this macro.
   
Extended Bus Master Priority setting
   0 = GLCDC graphics 1 data read
   1 = DRW2D texture data read
   2 = DRW2D frame buffer data read write and display list data read
   3 = GLCDC graphics 2 data read
   4 = EDMAC</description>
        </property>
        <property id="BSP_CFG_EBMAPCR_4TH_PRIORITY" display="Extended Bus Master 4th Priority Selection" default="2" type="combobox">
            <option id="BSP_CFG_EBMAPCR_4TH_PRIORITY.0" display="GLCDC graphics 1 data read" value="0"/>
            <option id="BSP_CFG_EBMAPCR_4TH_PRIORITY.1" display="DRW2D texture data read" value="1"/>
            <option id="BSP_CFG_EBMAPCR_4TH_PRIORITY.2" display="DRW2D frame buffer data read write and display list data read" value="2"/>
            <option id="BSP_CFG_EBMAPCR_4TH_PRIORITY.3" display="GLCDC graphics 2 data read" value="3"/>
            <option id="BSP_CFG_EBMAPCR_4TH_PRIORITY.4" display="EDMAC" value="4"/>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_4TH_PRIORITY}" != "${BSP_CFG_EBMAPCR_1ST_PRIORITY}")</constraint>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_4TH_PRIORITY}" != "${BSP_CFG_EBMAPCR_2ND_PRIORITY}")</constraint>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_4TH_PRIORITY}" != "${BSP_CFG_EBMAPCR_3RD_PRIORITY}")</constraint>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_4TH_PRIORITY}" != "${BSP_CFG_EBMAPCR_5TH_PRIORITY}")</constraint>
            <description>The extended bus master has five transfer sources: EDMAC, GLCDC-GRA1 (GLCDC graphics 1 data read), GLCDCGRA2 (GLCDC graphics 2 data read), DRW2D-TX (DRW2D texture data read), and DRW2D-FB (DRW2D frame buffer data read write and display list data read).
The default priority order in bsp is below
   GLCDC-GRA1 > GLCDC-GRA2 > DRW2D-TX > DRW2D-FB > EDMAC.
   Priority can be changed with this macro.
   
Extended Bus Master Priority setting
   0 = GLCDC graphics 1 data read
   1 = DRW2D texture data read
   2 = DRW2D frame buffer data read write and display list data read
   3 = GLCDC graphics 2 data read
   4 = EDMAC</description>
        </property>
        <property id="BSP_CFG_EBMAPCR_5TH_PRIORITY" display="Extended Bus Master 5th Priority Selection" default="4" type="combobox">
            <option id="BSP_CFG_EBMAPCR_5TH_PRIORITY.0" display="GLCDC graphics 1 data read" value="0"/>
            <option id="BSP_CFG_EBMAPCR_5TH_PRIORITY.1" display="DRW2D texture data read" value="1"/>
            <option id="BSP_CFG_EBMAPCR_5TH_PRIORITY.2" display="DRW2D frame buffer data read write and display list data read" value="2"/>
            <option id="BSP_CFG_EBMAPCR_5TH_PRIORITY.3" display="GLCDC graphics 2 data read" value="3"/>
            <option id="BSP_CFG_EBMAPCR_5TH_PRIORITY.4" display="EDMAC" value="4"/>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_5TH_PRIORITY}" != "${BSP_CFG_EBMAPCR_1ST_PRIORITY}")</constraint>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_5TH_PRIORITY}" != "${BSP_CFG_EBMAPCR_2ND_PRIORITY}")</constraint>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_5TH_PRIORITY}" != "${BSP_CFG_EBMAPCR_3RD_PRIORITY}")</constraint>
            <constraint display="Selected priority value must not be used multiple times">("${BSP_CFG_EBMAPCR_5TH_PRIORITY}" != "${BSP_CFG_EBMAPCR_4TH_PRIORITY}")</constraint>
            <description>The extended bus master has five transfer sources: EDMAC, GLCDC-GRA1 (GLCDC graphics 1 data read), GLCDCGRA2 (GLCDC graphics 2 data read), DRW2D-TX (DRW2D texture data read), and DRW2D-FB (DRW2D frame buffer data read write and display list data read).
The default priority order in bsp is below
   GLCDC-GRA1 > GLCDC-GRA2 > DRW2D-TX > DRW2D-FB > EDMAC.
   Priority can be changed with this macro.
   
Extended Bus Master Priority setting
   0 = GLCDC graphics 1 data read
   1 = DRW2D texture data read
   2 = DRW2D frame buffer data read write and display list data read
   3 = GLCDC graphics 2 data read
   4 = EDMAC</description>
        </property>
        <property id="BSP_CFG_FIT_IPL_MAX" display="Interrupt Priority Level When FIT Module Interrupts Are Disabled" default="0xF" type="combobox">
            <option id="BSP_CFG_FIT_IPL_MAX.0x0" display="Priority level 0 (lowest)" value="0x0"/>
            <option id="BSP_CFG_FIT_IPL_MAX.0x1" display="Priority level 1" value="0x1"/>
            <option id="BSP_CFG_FIT_IPL_MAX.0x2" display="Priority level 2" value="0x2"/>
            <option id="BSP_CFG_FIT_IPL_MAX.0x3" display="Priority level 3" value="0x3"/>
            <option id="BSP_CFG_FIT_IPL_MAX.0x4" display="Priority level 4" value="0x4"/>
            <option id="BSP_CFG_FIT_IPL_MAX.0x5" display="Priority level 5" value="0x5"/>
            <option id="BSP_CFG_FIT_IPL_MAX.0x6" display="Priority level 6" value="0x6"/>
            <option id="BSP_CFG_FIT_IPL_MAX.0x7" display="Priority level 7" value="0x7"/>
            <option id="BSP_CFG_FIT_IPL_MAX.0x8" display="Priority level 8" value="0x8"/>
            <option id="BSP_CFG_FIT_IPL_MAX.0x9" display="Priority level 9" value="0x9"/>
            <option id="BSP_CFG_FIT_IPL_MAX.0xA" display="Priority level 10" value="0xA"/>
            <option id="BSP_CFG_FIT_IPL_MAX.0xB" display="Priority level 11" value="0xB"/>
            <option id="BSP_CFG_FIT_IPL_MAX.0xC" display="Priority level 12" value="0xC"/>
            <option id="BSP_CFG_FIT_IPL_MAX.0xD" display="Priority level 13" value="0xD"/>
            <option id="BSP_CFG_FIT_IPL_MAX.0xE" display="Priority level 14" value="0xE"/>
            <option id="BSP_CFG_FIT_IPL_MAX.0xF" display="Priority level 15 (highest)" value="0xF"/>
            <description>For some BSP functions, it is necessary to ensure that, while these functions are executing, interrupts from other FIT modules do not occur. By controlling the IPL, these functions disable interrupts that are at or below the specified interrupt priority level.
Please set this value more than IPR for other FIT module interrupts. Don't change if there is no special processing with higher priority than all fit modules.</description>
        </property>
    </configuration>
</module>
